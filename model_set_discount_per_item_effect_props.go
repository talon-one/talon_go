/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * API version:
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// SetDiscountPerItemEffectProps The properties specific to the `setDiscountPerItem` effect, triggered whenever a validated rule contained a \"set per item discount\" effect. This is a discount that will be applied either on a specific item, on a specific item + additional cost or on all additional costs per item. This depends on the chosen scope.
type SetDiscountPerItemEffectProps struct {
	// The name of the discount. Contains a hashtag character indicating the index of the position of the item the discount applies to. It is identical to the value of the `position` property.
	Name string `json:"name"`
	// The total monetary value of the discount.
	Value float32 `json:"value"`
	// The index of the item in the cart items list on which this discount should be applied.
	Position float32 `json:"position"`
	// Only used when [cart item flattening](https://docs.talon.one/docs/product/campaigns/campaign-evaluation#flattening) is enabled. Indicates which item the discount applies to for cart items with `quantity` > 1.
	SubPosition *float32 `json:"subPosition,omitempty"`
	// The original value of the discount.
	DesiredValue *float32 `json:"desiredValue,omitempty"`
	// The scope of the discount: - `additionalCosts`: The discount applies to all the additional costs of the item. - `itemTotal`: The discount applies to the price of the item + the additional costs of the item. - `price`: The discount applies to the price of the item.
	Scope *string `json:"scope,omitempty"`
	// The total discount given if this effect is a result of a prorated discount.
	TotalDiscount *float32 `json:"totalDiscount,omitempty"`
	// The original total discount to give if this effect is a result of a prorated discount.
	DesiredTotalDiscount *float32 `json:"desiredTotalDiscount,omitempty"`
	// The position of the bundle in a list of item bundles created from the same bundle definition.
	BundleIndex *int32 `json:"bundleIndex,omitempty"`
	// The name of the bundle definition.
	BundleName *string `json:"bundleName,omitempty"`
}

// GetName returns the Name field value
func (o *SetDiscountPerItemEffectProps) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// SetName sets field value
func (o *SetDiscountPerItemEffectProps) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *SetDiscountPerItemEffectProps) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// SetValue sets field value
func (o *SetDiscountPerItemEffectProps) SetValue(v float32) {
	o.Value = v
}

// GetPosition returns the Position field value
func (o *SetDiscountPerItemEffectProps) GetPosition() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Position
}

// SetPosition sets field value
func (o *SetDiscountPerItemEffectProps) SetPosition(v float32) {
	o.Position = v
}

// GetSubPosition returns the SubPosition field value if set, zero value otherwise.
func (o *SetDiscountPerItemEffectProps) GetSubPosition() float32 {
	if o == nil || o.SubPosition == nil {
		var ret float32
		return ret
	}
	return *o.SubPosition
}

// GetSubPositionOk returns a tuple with the SubPosition field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SetDiscountPerItemEffectProps) GetSubPositionOk() (float32, bool) {
	if o == nil || o.SubPosition == nil {
		var ret float32
		return ret, false
	}
	return *o.SubPosition, true
}

// HasSubPosition returns a boolean if a field has been set.
func (o *SetDiscountPerItemEffectProps) HasSubPosition() bool {
	if o != nil && o.SubPosition != nil {
		return true
	}

	return false
}

// SetSubPosition gets a reference to the given float32 and assigns it to the SubPosition field.
func (o *SetDiscountPerItemEffectProps) SetSubPosition(v float32) {
	o.SubPosition = &v
}

// GetDesiredValue returns the DesiredValue field value if set, zero value otherwise.
func (o *SetDiscountPerItemEffectProps) GetDesiredValue() float32 {
	if o == nil || o.DesiredValue == nil {
		var ret float32
		return ret
	}
	return *o.DesiredValue
}

// GetDesiredValueOk returns a tuple with the DesiredValue field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SetDiscountPerItemEffectProps) GetDesiredValueOk() (float32, bool) {
	if o == nil || o.DesiredValue == nil {
		var ret float32
		return ret, false
	}
	return *o.DesiredValue, true
}

// HasDesiredValue returns a boolean if a field has been set.
func (o *SetDiscountPerItemEffectProps) HasDesiredValue() bool {
	if o != nil && o.DesiredValue != nil {
		return true
	}

	return false
}

// SetDesiredValue gets a reference to the given float32 and assigns it to the DesiredValue field.
func (o *SetDiscountPerItemEffectProps) SetDesiredValue(v float32) {
	o.DesiredValue = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *SetDiscountPerItemEffectProps) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SetDiscountPerItemEffectProps) GetScopeOk() (string, bool) {
	if o == nil || o.Scope == nil {
		var ret string
		return ret, false
	}
	return *o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *SetDiscountPerItemEffectProps) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *SetDiscountPerItemEffectProps) SetScope(v string) {
	o.Scope = &v
}

// GetTotalDiscount returns the TotalDiscount field value if set, zero value otherwise.
func (o *SetDiscountPerItemEffectProps) GetTotalDiscount() float32 {
	if o == nil || o.TotalDiscount == nil {
		var ret float32
		return ret
	}
	return *o.TotalDiscount
}

// GetTotalDiscountOk returns a tuple with the TotalDiscount field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SetDiscountPerItemEffectProps) GetTotalDiscountOk() (float32, bool) {
	if o == nil || o.TotalDiscount == nil {
		var ret float32
		return ret, false
	}
	return *o.TotalDiscount, true
}

// HasTotalDiscount returns a boolean if a field has been set.
func (o *SetDiscountPerItemEffectProps) HasTotalDiscount() bool {
	if o != nil && o.TotalDiscount != nil {
		return true
	}

	return false
}

// SetTotalDiscount gets a reference to the given float32 and assigns it to the TotalDiscount field.
func (o *SetDiscountPerItemEffectProps) SetTotalDiscount(v float32) {
	o.TotalDiscount = &v
}

// GetDesiredTotalDiscount returns the DesiredTotalDiscount field value if set, zero value otherwise.
func (o *SetDiscountPerItemEffectProps) GetDesiredTotalDiscount() float32 {
	if o == nil || o.DesiredTotalDiscount == nil {
		var ret float32
		return ret
	}
	return *o.DesiredTotalDiscount
}

// GetDesiredTotalDiscountOk returns a tuple with the DesiredTotalDiscount field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SetDiscountPerItemEffectProps) GetDesiredTotalDiscountOk() (float32, bool) {
	if o == nil || o.DesiredTotalDiscount == nil {
		var ret float32
		return ret, false
	}
	return *o.DesiredTotalDiscount, true
}

// HasDesiredTotalDiscount returns a boolean if a field has been set.
func (o *SetDiscountPerItemEffectProps) HasDesiredTotalDiscount() bool {
	if o != nil && o.DesiredTotalDiscount != nil {
		return true
	}

	return false
}

// SetDesiredTotalDiscount gets a reference to the given float32 and assigns it to the DesiredTotalDiscount field.
func (o *SetDiscountPerItemEffectProps) SetDesiredTotalDiscount(v float32) {
	o.DesiredTotalDiscount = &v
}

// GetBundleIndex returns the BundleIndex field value if set, zero value otherwise.
func (o *SetDiscountPerItemEffectProps) GetBundleIndex() int32 {
	if o == nil || o.BundleIndex == nil {
		var ret int32
		return ret
	}
	return *o.BundleIndex
}

// GetBundleIndexOk returns a tuple with the BundleIndex field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SetDiscountPerItemEffectProps) GetBundleIndexOk() (int32, bool) {
	if o == nil || o.BundleIndex == nil {
		var ret int32
		return ret, false
	}
	return *o.BundleIndex, true
}

// HasBundleIndex returns a boolean if a field has been set.
func (o *SetDiscountPerItemEffectProps) HasBundleIndex() bool {
	if o != nil && o.BundleIndex != nil {
		return true
	}

	return false
}

// SetBundleIndex gets a reference to the given int32 and assigns it to the BundleIndex field.
func (o *SetDiscountPerItemEffectProps) SetBundleIndex(v int32) {
	o.BundleIndex = &v
}

// GetBundleName returns the BundleName field value if set, zero value otherwise.
func (o *SetDiscountPerItemEffectProps) GetBundleName() string {
	if o == nil || o.BundleName == nil {
		var ret string
		return ret
	}
	return *o.BundleName
}

// GetBundleNameOk returns a tuple with the BundleName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SetDiscountPerItemEffectProps) GetBundleNameOk() (string, bool) {
	if o == nil || o.BundleName == nil {
		var ret string
		return ret, false
	}
	return *o.BundleName, true
}

// HasBundleName returns a boolean if a field has been set.
func (o *SetDiscountPerItemEffectProps) HasBundleName() bool {
	if o != nil && o.BundleName != nil {
		return true
	}

	return false
}

// SetBundleName gets a reference to the given string and assigns it to the BundleName field.
func (o *SetDiscountPerItemEffectProps) SetBundleName(v string) {
	o.BundleName = &v
}

type NullableSetDiscountPerItemEffectProps struct {
	Value        SetDiscountPerItemEffectProps
	ExplicitNull bool
}

func (v NullableSetDiscountPerItemEffectProps) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableSetDiscountPerItemEffectProps) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
