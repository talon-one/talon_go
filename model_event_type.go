/*
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
	"time"
)

// EventType
type EventType struct {
	// Unique ID for this entity.
	Id int32 `json:"id"`
	// The exact moment this entity was created.
	Created time.Time `json:"created"`
	// The IDs of the applications that are related to this entity.
	ApplicationIds []int32 `json:"applicationIds"`
	// The human-friendly display name for this event type. Use a short, past-tense, description of the event.
	Title string `json:"title"`
	// The machine-friendly canonical name for this event type. This will be used in URLs, and cannot be changed after an event type has been created.
	Name string `json:"name"`
	// An explanation of when the event type is triggered. Write this with a campaign manager in mind. For example:  > The \"Payment Accepted\" event is triggered after successful processing of a payment by our payment gateway.
	Description string `json:"description"`
	// This defines how the request payload will be parsed before your handler code is run.
	MimeType string `json:"mimeType"`
	// It is often helpful to include an example payload with the event type definition for documentation purposes.
	ExamplePayload *string `json:"examplePayload,omitempty"`
	// It is strongly recommended to define a JSON schema that will be used to perform structural validation of request payloads after parsing.
	Schema *map[string]interface{} `json:"schema,omitempty"`
	// The language of the handler code. Currently only `\"talang\"` is supported.
	HandlerLanguage *string `json:"handlerLanguage,omitempty"`
	// Code that will be run after successful parsing & validation of the payload for this event. This code _may_ choose to evaluate campaign rules.
	Handler string `json:"handler"`
	// The version of this event type. When updating an existing event type this must be **exactly** `currentVersion + 1`.
	Version int32 `json:"version"`
}

// GetId returns the Id field value
func (o *EventType) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// SetId sets field value
func (o *EventType) SetId(v int32) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *EventType) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// SetCreated sets field value
func (o *EventType) SetCreated(v time.Time) {
	o.Created = v
}

// GetApplicationIds returns the ApplicationIds field value
func (o *EventType) GetApplicationIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.ApplicationIds
}

// SetApplicationIds sets field value
func (o *EventType) SetApplicationIds(v []int32) {
	o.ApplicationIds = v
}

// GetTitle returns the Title field value
func (o *EventType) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// SetTitle sets field value
func (o *EventType) SetTitle(v string) {
	o.Title = v
}

// GetName returns the Name field value
func (o *EventType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// SetName sets field value
func (o *EventType) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *EventType) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// SetDescription sets field value
func (o *EventType) SetDescription(v string) {
	o.Description = v
}

// GetMimeType returns the MimeType field value
func (o *EventType) GetMimeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MimeType
}

// SetMimeType sets field value
func (o *EventType) SetMimeType(v string) {
	o.MimeType = v
}

// GetExamplePayload returns the ExamplePayload field value if set, zero value otherwise.
func (o *EventType) GetExamplePayload() string {
	if o == nil || o.ExamplePayload == nil {
		var ret string
		return ret
	}
	return *o.ExamplePayload
}

// GetExamplePayloadOk returns a tuple with the ExamplePayload field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EventType) GetExamplePayloadOk() (string, bool) {
	if o == nil || o.ExamplePayload == nil {
		var ret string
		return ret, false
	}
	return *o.ExamplePayload, true
}

// HasExamplePayload returns a boolean if a field has been set.
func (o *EventType) HasExamplePayload() bool {
	if o != nil && o.ExamplePayload != nil {
		return true
	}

	return false
}

// SetExamplePayload gets a reference to the given string and assigns it to the ExamplePayload field.
func (o *EventType) SetExamplePayload(v string) {
	o.ExamplePayload = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *EventType) GetSchema() map[string]interface{} {
	if o == nil || o.Schema == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EventType) GetSchemaOk() (map[string]interface{}, bool) {
	if o == nil || o.Schema == nil {
		var ret map[string]interface{}
		return ret, false
	}
	return *o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *EventType) HasSchema() bool {
	if o != nil && o.Schema != nil {
		return true
	}

	return false
}

// SetSchema gets a reference to the given map[string]interface{} and assigns it to the Schema field.
func (o *EventType) SetSchema(v map[string]interface{}) {
	o.Schema = &v
}

// GetHandlerLanguage returns the HandlerLanguage field value if set, zero value otherwise.
func (o *EventType) GetHandlerLanguage() string {
	if o == nil || o.HandlerLanguage == nil {
		var ret string
		return ret
	}
	return *o.HandlerLanguage
}

// GetHandlerLanguageOk returns a tuple with the HandlerLanguage field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EventType) GetHandlerLanguageOk() (string, bool) {
	if o == nil || o.HandlerLanguage == nil {
		var ret string
		return ret, false
	}
	return *o.HandlerLanguage, true
}

// HasHandlerLanguage returns a boolean if a field has been set.
func (o *EventType) HasHandlerLanguage() bool {
	if o != nil && o.HandlerLanguage != nil {
		return true
	}

	return false
}

// SetHandlerLanguage gets a reference to the given string and assigns it to the HandlerLanguage field.
func (o *EventType) SetHandlerLanguage(v string) {
	o.HandlerLanguage = &v
}

// GetHandler returns the Handler field value
func (o *EventType) GetHandler() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Handler
}

// SetHandler sets field value
func (o *EventType) SetHandler(v string) {
	o.Handler = v
}

// GetVersion returns the Version field value
func (o *EventType) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// SetVersion sets field value
func (o *EventType) SetVersion(v int32) {
	o.Version = v
}

type NullableEventType struct {
	Value        EventType
	ExplicitNull bool
}

func (v NullableEventType) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableEventType) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
