/*
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
	"time"
)

// Giveaway
type Giveaway struct {
	// Unique ID for this entity.
	Id int32 `json:"id"`
	// The exact moment this entity was created.
	Created time.Time `json:"created"`
	// The code value of this giveaway.
	Code string `json:"code"`
	// The ID of the pool to return giveaway codes from.
	PoolId int32 `json:"poolId"`
	// Timestamp at which point the giveaway becomes valid.
	StartDate *time.Time `json:"startDate,omitempty"`
	// Timestamp at which point the giveaway becomes invalid.
	EndDate *time.Time `json:"endDate,omitempty"`
	// Arbitrary properties associated with this giveaway.
	Attributes *map[string]interface{} `json:"attributes,omitempty"`
	// Indicates whether this giveaway code was given before.
	Used *bool `json:"used,omitempty"`
	// The ID of the Import which created this giveaway.
	ImportId *int32 `json:"importId,omitempty"`
}

// GetId returns the Id field value
func (o *Giveaway) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// SetId sets field value
func (o *Giveaway) SetId(v int32) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *Giveaway) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// SetCreated sets field value
func (o *Giveaway) SetCreated(v time.Time) {
	o.Created = v
}

// GetCode returns the Code field value
func (o *Giveaway) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// SetCode sets field value
func (o *Giveaway) SetCode(v string) {
	o.Code = v
}

// GetPoolId returns the PoolId field value
func (o *Giveaway) GetPoolId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PoolId
}

// SetPoolId sets field value
func (o *Giveaway) SetPoolId(v int32) {
	o.PoolId = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Giveaway) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Giveaway) GetStartDateOk() (time.Time, bool) {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret, false
	}
	return *o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Giveaway) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *Giveaway) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *Giveaway) GetEndDate() time.Time {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Giveaway) GetEndDateOk() (time.Time, bool) {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret, false
	}
	return *o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *Giveaway) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *Giveaway) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Giveaway) GetAttributes() map[string]interface{} {
	if o == nil || o.Attributes == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Giveaway) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		var ret map[string]interface{}
		return ret, false
	}
	return *o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Giveaway) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *Giveaway) SetAttributes(v map[string]interface{}) {
	o.Attributes = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *Giveaway) GetUsed() bool {
	if o == nil || o.Used == nil {
		var ret bool
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Giveaway) GetUsedOk() (bool, bool) {
	if o == nil || o.Used == nil {
		var ret bool
		return ret, false
	}
	return *o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *Giveaway) HasUsed() bool {
	if o != nil && o.Used != nil {
		return true
	}

	return false
}

// SetUsed gets a reference to the given bool and assigns it to the Used field.
func (o *Giveaway) SetUsed(v bool) {
	o.Used = &v
}

// GetImportId returns the ImportId field value if set, zero value otherwise.
func (o *Giveaway) GetImportId() int32 {
	if o == nil || o.ImportId == nil {
		var ret int32
		return ret
	}
	return *o.ImportId
}

// GetImportIdOk returns a tuple with the ImportId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Giveaway) GetImportIdOk() (int32, bool) {
	if o == nil || o.ImportId == nil {
		var ret int32
		return ret, false
	}
	return *o.ImportId, true
}

// HasImportId returns a boolean if a field has been set.
func (o *Giveaway) HasImportId() bool {
	if o != nil && o.ImportId != nil {
		return true
	}

	return false
}

// SetImportId gets a reference to the given int32 and assigns it to the ImportId field.
func (o *Giveaway) SetImportId(v int32) {
	o.ImportId = &v
}

type NullableGiveaway struct {
	Value        Giveaway
	ExplicitNull bool
}

func (v NullableGiveaway) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableGiveaway) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
