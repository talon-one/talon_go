/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * API version:
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// NewCampaignStoreBudgetStoreLimit struct for NewCampaignStoreBudgetStoreLimit
type NewCampaignStoreBudgetStoreLimit struct {
	// The ID of the store. You can get this ID with the [List stores](#tag/Stores/operation/listStores) endpoint.
	StoreId int32 `json:"storeId"`
	// The value to set for the limit.
	Limit float32 `json:"limit"`
}

// GetStoreId returns the StoreId field value
func (o *NewCampaignStoreBudgetStoreLimit) GetStoreId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StoreId
}

// SetStoreId sets field value
func (o *NewCampaignStoreBudgetStoreLimit) SetStoreId(v int32) {
	o.StoreId = v
}

// GetLimit returns the Limit field value
func (o *NewCampaignStoreBudgetStoreLimit) GetLimit() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Limit
}

// SetLimit sets field value
func (o *NewCampaignStoreBudgetStoreLimit) SetLimit(v float32) {
	o.Limit = v
}

type NullableNewCampaignStoreBudgetStoreLimit struct {
	Value        NewCampaignStoreBudgetStoreLimit
	ExplicitNull bool
}

func (v NullableNewCampaignStoreBudgetStoreLimit) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableNewCampaignStoreBudgetStoreLimit) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
