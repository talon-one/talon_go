/*
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// NewRuleset struct for NewRuleset
type NewRuleset struct {
	// Set of rules to apply.
	Rules []Rule `json:"rules"`
	// An array that provides objects with variable names (name) and talang expressions to whose result they are bound (expression) during rule evaluation. The order of the evaluation is decided by the position in the array.
	Bindings []Binding `json:"bindings"`
	// A string indicating which version of the rulebuilder was used to create this ruleset.
	RbVersion *string `json:"rbVersion,omitempty"`
	// A boolean indicating whether this newly created ruleset should also be activated for the campaign that owns it
	Activate *bool `json:"activate,omitempty"`
}

// GetRules returns the Rules field value
func (o *NewRuleset) GetRules() []Rule {
	if o == nil {
		var ret []Rule
		return ret
	}

	return o.Rules
}

// SetRules sets field value
func (o *NewRuleset) SetRules(v []Rule) {
	o.Rules = v
}

// GetBindings returns the Bindings field value
func (o *NewRuleset) GetBindings() []Binding {
	if o == nil {
		var ret []Binding
		return ret
	}

	return o.Bindings
}

// SetBindings sets field value
func (o *NewRuleset) SetBindings(v []Binding) {
	o.Bindings = v
}

// GetRbVersion returns the RbVersion field value if set, zero value otherwise.
func (o *NewRuleset) GetRbVersion() string {
	if o == nil || o.RbVersion == nil {
		var ret string
		return ret
	}
	return *o.RbVersion
}

// GetRbVersionOk returns a tuple with the RbVersion field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewRuleset) GetRbVersionOk() (string, bool) {
	if o == nil || o.RbVersion == nil {
		var ret string
		return ret, false
	}
	return *o.RbVersion, true
}

// HasRbVersion returns a boolean if a field has been set.
func (o *NewRuleset) HasRbVersion() bool {
	if o != nil && o.RbVersion != nil {
		return true
	}

	return false
}

// SetRbVersion gets a reference to the given string and assigns it to the RbVersion field.
func (o *NewRuleset) SetRbVersion(v string) {
	o.RbVersion = &v
}

// GetActivate returns the Activate field value if set, zero value otherwise.
func (o *NewRuleset) GetActivate() bool {
	if o == nil || o.Activate == nil {
		var ret bool
		return ret
	}
	return *o.Activate
}

// GetActivateOk returns a tuple with the Activate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewRuleset) GetActivateOk() (bool, bool) {
	if o == nil || o.Activate == nil {
		var ret bool
		return ret, false
	}
	return *o.Activate, true
}

// HasActivate returns a boolean if a field has been set.
func (o *NewRuleset) HasActivate() bool {
	if o != nil && o.Activate != nil {
		return true
	}

	return false
}

// SetActivate gets a reference to the given bool and assigns it to the Activate field.
func (o *NewRuleset) SetActivate(v bool) {
	o.Activate = &v
}

type NullableNewRuleset struct {
	Value        NewRuleset
	ExplicitNull bool
}

func (v NullableNewRuleset) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableNewRuleset) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
