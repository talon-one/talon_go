/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * API version: 
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
	"time"
)

// MessageLogEntry Message Log.
type MessageLogEntry struct {
	// Unique identifier of the message.
	Id string `json:"id"`
	// Name of the service that generated the log entry.
	Service string `json:"service"`
	// Type of change that triggered the notification.
	ChangeType *string `json:"changeType,omitempty"`
	// ID of the notification.
	NotificationId *int32 `json:"notificationId,omitempty"`
	// The name of the notification.
	NotificationName *string `json:"notificationName,omitempty"`
	Request *MessageLogRequest `json:"request,omitempty"`
	Response *MessageLogResponse `json:"response,omitempty"`
	// Timestamp when the log entry was created.
	CreatedAt time.Time `json:"createdAt"`
	// The entity type the notification is related to. 
	EntityType *string `json:"entityType,omitempty"`
	// Identifier of the Application.
	ApplicationId *int32 `json:"applicationId,omitempty"`
	// Identifier of the loyalty program.
	LoyaltyProgramId *int32 `json:"loyaltyProgramId,omitempty"`
}

// GetId returns the Id field value
func (o *MessageLogEntry) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// SetId sets field value
func (o *MessageLogEntry) SetId(v string) {
	o.Id = v
}

// GetService returns the Service field value
func (o *MessageLogEntry) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// SetService sets field value
func (o *MessageLogEntry) SetService(v string) {
	o.Service = v
}

// GetChangeType returns the ChangeType field value if set, zero value otherwise.
func (o *MessageLogEntry) GetChangeType() string {
	if o == nil || o.ChangeType == nil {
		var ret string
		return ret
	}
	return *o.ChangeType
}

// GetChangeTypeOk returns a tuple with the ChangeType field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MessageLogEntry) GetChangeTypeOk() (string, bool) {
	if o == nil || o.ChangeType == nil {
		var ret string
		return ret, false
	}
	return *o.ChangeType, true
}

// HasChangeType returns a boolean if a field has been set.
func (o *MessageLogEntry) HasChangeType() bool {
	if o != nil && o.ChangeType != nil {
		return true
	}

	return false
}

// SetChangeType gets a reference to the given string and assigns it to the ChangeType field.
func (o *MessageLogEntry) SetChangeType(v string) {
	o.ChangeType = &v
}

// GetNotificationId returns the NotificationId field value if set, zero value otherwise.
func (o *MessageLogEntry) GetNotificationId() int32 {
	if o == nil || o.NotificationId == nil {
		var ret int32
		return ret
	}
	return *o.NotificationId
}

// GetNotificationIdOk returns a tuple with the NotificationId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MessageLogEntry) GetNotificationIdOk() (int32, bool) {
	if o == nil || o.NotificationId == nil {
		var ret int32
		return ret, false
	}
	return *o.NotificationId, true
}

// HasNotificationId returns a boolean if a field has been set.
func (o *MessageLogEntry) HasNotificationId() bool {
	if o != nil && o.NotificationId != nil {
		return true
	}

	return false
}

// SetNotificationId gets a reference to the given int32 and assigns it to the NotificationId field.
func (o *MessageLogEntry) SetNotificationId(v int32) {
	o.NotificationId = &v
}

// GetNotificationName returns the NotificationName field value if set, zero value otherwise.
func (o *MessageLogEntry) GetNotificationName() string {
	if o == nil || o.NotificationName == nil {
		var ret string
		return ret
	}
	return *o.NotificationName
}

// GetNotificationNameOk returns a tuple with the NotificationName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MessageLogEntry) GetNotificationNameOk() (string, bool) {
	if o == nil || o.NotificationName == nil {
		var ret string
		return ret, false
	}
	return *o.NotificationName, true
}

// HasNotificationName returns a boolean if a field has been set.
func (o *MessageLogEntry) HasNotificationName() bool {
	if o != nil && o.NotificationName != nil {
		return true
	}

	return false
}

// SetNotificationName gets a reference to the given string and assigns it to the NotificationName field.
func (o *MessageLogEntry) SetNotificationName(v string) {
	o.NotificationName = &v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *MessageLogEntry) GetRequest() MessageLogRequest {
	if o == nil || o.Request == nil {
		var ret MessageLogRequest
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MessageLogEntry) GetRequestOk() (MessageLogRequest, bool) {
	if o == nil || o.Request == nil {
		var ret MessageLogRequest
		return ret, false
	}
	return *o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *MessageLogEntry) HasRequest() bool {
	if o != nil && o.Request != nil {
		return true
	}

	return false
}

// SetRequest gets a reference to the given MessageLogRequest and assigns it to the Request field.
func (o *MessageLogEntry) SetRequest(v MessageLogRequest) {
	o.Request = &v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *MessageLogEntry) GetResponse() MessageLogResponse {
	if o == nil || o.Response == nil {
		var ret MessageLogResponse
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MessageLogEntry) GetResponseOk() (MessageLogResponse, bool) {
	if o == nil || o.Response == nil {
		var ret MessageLogResponse
		return ret, false
	}
	return *o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *MessageLogEntry) HasResponse() bool {
	if o != nil && o.Response != nil {
		return true
	}

	return false
}

// SetResponse gets a reference to the given MessageLogResponse and assigns it to the Response field.
func (o *MessageLogEntry) SetResponse(v MessageLogResponse) {
	o.Response = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *MessageLogEntry) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// SetCreatedAt sets field value
func (o *MessageLogEntry) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *MessageLogEntry) GetEntityType() string {
	if o == nil || o.EntityType == nil {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MessageLogEntry) GetEntityTypeOk() (string, bool) {
	if o == nil || o.EntityType == nil {
		var ret string
		return ret, false
	}
	return *o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *MessageLogEntry) HasEntityType() bool {
	if o != nil && o.EntityType != nil {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *MessageLogEntry) SetEntityType(v string) {
	o.EntityType = &v
}

// GetApplicationId returns the ApplicationId field value if set, zero value otherwise.
func (o *MessageLogEntry) GetApplicationId() int32 {
	if o == nil || o.ApplicationId == nil {
		var ret int32
		return ret
	}
	return *o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MessageLogEntry) GetApplicationIdOk() (int32, bool) {
	if o == nil || o.ApplicationId == nil {
		var ret int32
		return ret, false
	}
	return *o.ApplicationId, true
}

// HasApplicationId returns a boolean if a field has been set.
func (o *MessageLogEntry) HasApplicationId() bool {
	if o != nil && o.ApplicationId != nil {
		return true
	}

	return false
}

// SetApplicationId gets a reference to the given int32 and assigns it to the ApplicationId field.
func (o *MessageLogEntry) SetApplicationId(v int32) {
	o.ApplicationId = &v
}

// GetLoyaltyProgramId returns the LoyaltyProgramId field value if set, zero value otherwise.
func (o *MessageLogEntry) GetLoyaltyProgramId() int32 {
	if o == nil || o.LoyaltyProgramId == nil {
		var ret int32
		return ret
	}
	return *o.LoyaltyProgramId
}

// GetLoyaltyProgramIdOk returns a tuple with the LoyaltyProgramId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MessageLogEntry) GetLoyaltyProgramIdOk() (int32, bool) {
	if o == nil || o.LoyaltyProgramId == nil {
		var ret int32
		return ret, false
	}
	return *o.LoyaltyProgramId, true
}

// HasLoyaltyProgramId returns a boolean if a field has been set.
func (o *MessageLogEntry) HasLoyaltyProgramId() bool {
	if o != nil && o.LoyaltyProgramId != nil {
		return true
	}

	return false
}

// SetLoyaltyProgramId gets a reference to the given int32 and assigns it to the LoyaltyProgramId field.
func (o *MessageLogEntry) SetLoyaltyProgramId(v int32) {
	o.LoyaltyProgramId = &v
}

type NullableMessageLogEntry struct {
	Value MessageLogEntry
	ExplicitNull bool
}

func (v NullableMessageLogEntry) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableMessageLogEntry) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
