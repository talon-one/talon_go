/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * API version: 
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
	"time"
)

// ChangeLoyaltyTierLevelEffectProps The properties specific to the \"changeLoyaltyTierLevel\" effect. This is triggered whenever the user's loyalty tier is upgraded due to a validated rule that contained an \"addLoyaltyPoints\" effect. 
type ChangeLoyaltyTierLevelEffectProps struct {
	// The expiration date of the new tier.
	ExpiryDate *time.Time `json:"expiryDate,omitempty"`
	// The name of the tier to which the user has been upgraded.
	NewTierName string `json:"newTierName"`
	// The name of the tier from which the user was upgraded.
	PreviousTierName *string `json:"previousTierName,omitempty"`
	// The ID of the loyalty program where these points were added.
	ProgramId int32 `json:"programId"`
	// The title of the rule that triggered the tier upgrade.
	RuleTitle string `json:"ruleTitle"`
	// The ID of the subledger within the loyalty program where these points were added.
	SubLedgerId string `json:"subLedgerId"`
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *ChangeLoyaltyTierLevelEffectProps) GetExpiryDate() time.Time {
	if o == nil || o.ExpiryDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ChangeLoyaltyTierLevelEffectProps) GetExpiryDateOk() (time.Time, bool) {
	if o == nil || o.ExpiryDate == nil {
		var ret time.Time
		return ret, false
	}
	return *o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *ChangeLoyaltyTierLevelEffectProps) HasExpiryDate() bool {
	if o != nil && o.ExpiryDate != nil {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given time.Time and assigns it to the ExpiryDate field.
func (o *ChangeLoyaltyTierLevelEffectProps) SetExpiryDate(v time.Time) {
	o.ExpiryDate = &v
}

// GetNewTierName returns the NewTierName field value
func (o *ChangeLoyaltyTierLevelEffectProps) GetNewTierName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewTierName
}

// SetNewTierName sets field value
func (o *ChangeLoyaltyTierLevelEffectProps) SetNewTierName(v string) {
	o.NewTierName = v
}

// GetPreviousTierName returns the PreviousTierName field value if set, zero value otherwise.
func (o *ChangeLoyaltyTierLevelEffectProps) GetPreviousTierName() string {
	if o == nil || o.PreviousTierName == nil {
		var ret string
		return ret
	}
	return *o.PreviousTierName
}

// GetPreviousTierNameOk returns a tuple with the PreviousTierName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ChangeLoyaltyTierLevelEffectProps) GetPreviousTierNameOk() (string, bool) {
	if o == nil || o.PreviousTierName == nil {
		var ret string
		return ret, false
	}
	return *o.PreviousTierName, true
}

// HasPreviousTierName returns a boolean if a field has been set.
func (o *ChangeLoyaltyTierLevelEffectProps) HasPreviousTierName() bool {
	if o != nil && o.PreviousTierName != nil {
		return true
	}

	return false
}

// SetPreviousTierName gets a reference to the given string and assigns it to the PreviousTierName field.
func (o *ChangeLoyaltyTierLevelEffectProps) SetPreviousTierName(v string) {
	o.PreviousTierName = &v
}

// GetProgramId returns the ProgramId field value
func (o *ChangeLoyaltyTierLevelEffectProps) GetProgramId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProgramId
}

// SetProgramId sets field value
func (o *ChangeLoyaltyTierLevelEffectProps) SetProgramId(v int32) {
	o.ProgramId = v
}

// GetRuleTitle returns the RuleTitle field value
func (o *ChangeLoyaltyTierLevelEffectProps) GetRuleTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RuleTitle
}

// SetRuleTitle sets field value
func (o *ChangeLoyaltyTierLevelEffectProps) SetRuleTitle(v string) {
	o.RuleTitle = v
}

// GetSubLedgerId returns the SubLedgerId field value
func (o *ChangeLoyaltyTierLevelEffectProps) GetSubLedgerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubLedgerId
}

// SetSubLedgerId sets field value
func (o *ChangeLoyaltyTierLevelEffectProps) SetSubLedgerId(v string) {
	o.SubLedgerId = v
}

type NullableChangeLoyaltyTierLevelEffectProps struct {
	Value ChangeLoyaltyTierLevelEffectProps
	ExplicitNull bool
}

func (v NullableChangeLoyaltyTierLevelEffectProps) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableChangeLoyaltyTierLevelEffectProps) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
