/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// EventAllOf struct for EventAllOf
type EventAllOf struct {
	// The ID of the session that this event occurred in.
	SessionId *string `json:"sessionId,omitempty"`
	// An array of effects generated by the rules of the enabled campaigns of the Application.  You decide how to apply them in your system. See the list of [API effects](https://docs.talon.one/docs/dev/integration-api/api-effects). 
	Effects [][]map[string]interface{} `json:"effects"`
	// Ledger entries for the event.
	LedgerEntries []LedgerEntry `json:"ledgerEntries"`
	Meta *Meta `json:"meta,omitempty"`
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *EventAllOf) GetSessionId() string {
	if o == nil || o.SessionId == nil {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EventAllOf) GetSessionIdOk() (string, bool) {
	if o == nil || o.SessionId == nil {
		var ret string
		return ret, false
	}
	return *o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *EventAllOf) HasSessionId() bool {
	if o != nil && o.SessionId != nil {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *EventAllOf) SetSessionId(v string) {
	o.SessionId = &v
}

// GetEffects returns the Effects field value
func (o *EventAllOf) GetEffects() [][]map[string]interface{} {
	if o == nil {
		var ret [][]map[string]interface{}
		return ret
	}

	return o.Effects
}

// SetEffects sets field value
func (o *EventAllOf) SetEffects(v [][]map[string]interface{}) {
	o.Effects = v
}

// GetLedgerEntries returns the LedgerEntries field value
func (o *EventAllOf) GetLedgerEntries() []LedgerEntry {
	if o == nil {
		var ret []LedgerEntry
		return ret
	}

	return o.LedgerEntries
}

// SetLedgerEntries sets field value
func (o *EventAllOf) SetLedgerEntries(v []LedgerEntry) {
	o.LedgerEntries = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *EventAllOf) GetMeta() Meta {
	if o == nil || o.Meta == nil {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EventAllOf) GetMetaOk() (Meta, bool) {
	if o == nil || o.Meta == nil {
		var ret Meta
		return ret, false
	}
	return *o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *EventAllOf) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *EventAllOf) SetMeta(v Meta) {
	o.Meta = &v
}

type NullableEventAllOf struct {
	Value EventAllOf
	ExplicitNull bool
}

func (v NullableEventAllOf) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableEventAllOf) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
