/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
	"time"
)

// EffectProps The properties of the effect. See [API effects](https://docs.talon.one/docs/dev/integration-api/api-effects).
type EffectProps struct {
	// The current progress of the customer in the achievement.
	Value float32 `json:"value"`
	// The id of the referral code that was redeemed.
	Id int32 `json:"id"`
	// The reason why this referral code was rejected.
	RejectionReason string `json:"rejectionReason"`
	// The index of the condition that caused the rejection of the referral.
	ConditionIndex *int32 `json:"conditionIndex,omitempty"`
	// The index of the effect that caused the rejection of the referral.
	EffectIndex *int32 `json:"effectIndex,omitempty"`
	// More details about the failure.
	Details *string `json:"details,omitempty"`
	// The reason why the campaign was not applied.
	CampaignExclusionReason *string `json:"campaignExclusionReason,omitempty"`
	// The internal ID of the customer profile.
	ProfileId int32 `json:"profileId"`
	// The name / description of this discount
	Name string `json:"name"`
	// The scope of the rolled back discount - For a discount per session, it can be one of `cartItems`, `additionalCosts` or `sessionTotal` - For a discount per item, it can be one of `price`, `additionalCosts` or `itemTotal` 
	Scope *string `json:"scope,omitempty"`
	// Only with [partial discounts enabled](https://docs.talon.one/docs/product/campaigns/campaign-evaluation/#partial-discounts). Represents the monetary value of the discount to be applied to additional discount without considering budget limitations. 
	DesiredValue *float32 `json:"desiredValue,omitempty"`
	// The index of the item in the cart item list containing the additional cost to be discounted.
	Position float32 `json:"position"`
	// For cart items with `quantity` > 1, the sub position indicates which item the discount applies to. 
	SubPosition *float32 `json:"subPosition,omitempty"`
	// The total discount given if this effect is a result of a prorated discount.
	TotalDiscount *float32 `json:"totalDiscount,omitempty"`
	// The original total discount to give if this effect is a result of a prorated discount.
	DesiredTotalDiscount *float32 `json:"desiredTotalDiscount,omitempty"`
	// The position of the bundle in a list of item bundles created from the same bundle definition.
	BundleIndex *int32 `json:"bundleIndex,omitempty"`
	// The name of the bundle definition.
	BundleName *string `json:"bundleName,omitempty"`
	// The index of the targeted bundle item on which the applied discount is based.
	TargetedItemPosition *float32 `json:"targetedItemPosition,omitempty"`
	// The sub-position of the targeted bundle item on which the applied discount is based. 
	TargetedItemSubPosition *float32 `json:"targetedItemSubPosition,omitempty"`
	// The ID of the additional cost.
	AdditionalCostId int32 `json:"additionalCostId"`
	// The name of the additional cost.
	AdditionalCost string `json:"additionalCost"`
	// The ID of the webhook that was triggered.
	WebhookId float32 `json:"webhookId"`
	// The name of the webhook that was triggered.
	WebhookName string `json:"webhookName"`
	// The ID of the loyalty program where these points were reimbursed.
	ProgramId int32 `json:"programId"`
	// The ID of the subledger within the loyalty program where these points were reimbursed.
	SubLedgerId string `json:"subLedgerId"`
	// The integration ID of the profile that will be awarded the giveaway.
	RecipientIntegrationId string `json:"recipientIntegrationId"`
	// Date after which the reimbursed points will be valid.
	StartDate *time.Time `json:"startDate,omitempty"`
	// Date after which the reimbursed points will expire.
	ExpiryDate *time.Time `json:"expiryDate,omitempty"`
	// The identifier of 'addition' entries added to the ledger as the `deductLoyaltyPoints` effect is rolled back.
	TransactionUUID string `json:"transactionUUID"`
	// The index of the item in the cart item list to which the custom effect is applied.
	CartItemPosition *float32 `json:"cartItemPosition,omitempty"`
	// For cart items with quantity > 1, the sub position indicates to which item unit the custom effect is applied. 
	CartItemSubPosition *float32 `json:"cartItemSubPosition,omitempty"`
	// The alphanumeric identifier of the loyalty card. 
	CardIdentifier *string `json:"cardIdentifier,omitempty"`
	// The title of the rule that triggered the tier upgrade.
	RuleTitle string `json:"ruleTitle"`
	// The name of the tier from which the user was upgraded.
	PreviousTierName *string `json:"previousTierName,omitempty"`
	// The name of the tier to which the user has been upgraded.
	NewTierName string `json:"newTierName"`
	// SKU of the item that needs to be added.
	Sku string `json:"sku"`
	// The type of notification that should be shown (e.g. error/warning/info).
	NotificationType string `json:"notificationType"`
	// Title of the notification.
	Title string `json:"title"`
	// Body of the notification.
	Body string `json:"body"`
	// The exact path of the attribute that was updated.
	Path string `json:"path"`
	// Description of the product bundle.
	Description string `json:"description"`
	// The cart item attributes that determined which items are being bundled together.
	BundleAttributes []string `json:"bundleAttributes"`
	// The indices in the cart items array of the bundled items.
	ItemsIndices []float32 `json:"itemsIndices"`
	// The ID of the giveaways pool the code will be taken from.
	PoolId int32 `json:"poolId"`
	// The name of the giveaways pool the code will be taken from.
	PoolName string `json:"poolName"`
	// The internal ID for the giveaway that was awarded.
	GiveawayId int32 `json:"giveawayId"`
	// The giveaway code that was awarded.
	Code string `json:"code"`
	// The error message.
	Message string `json:"message"`
	// The ID of the custom effect that was triggered.
	EffectId int32 `json:"effectId"`
	// The JSON payload of the custom effect.
	Payload map[string]map[string]interface{} `json:"payload"`
	// The value of the coupon currently on scope.
	CouponValue string `json:"couponValue"`
	// The ID of the customer profile in the third-party integration platform.
	ProfileIntegrationId string `json:"profileIntegrationId"`
	// Indicates whether this is a new coupon reservation or not.
	IsNewReservation bool `json:"isNewReservation"`
	// The internal ID of the audience.
	AudienceId *int32 `json:"audienceId,omitempty"`
	// The name of the audience.
	AudienceName *string `json:"audienceName,omitempty"`
	// The internal ID of the achievement.
	AchievementId int32 `json:"achievementId"`
	// The name of the achievement.
	AchievementName string `json:"achievementName"`
	// The internal ID of the achievement progress tracker.
	ProgressTrackerId int32 `json:"progressTrackerId"`
	// The value by which the customer's current progress in the achievement is increased.
	Delta float32 `json:"delta"`
	// The target value to complete the achievement.
	Target float32 `json:"target"`
	// Indicates if the customer has completed the achievement in the current session.
	IsJustCompleted bool `json:"isJustCompleted"`
	// The value by which the customer's current progress in the achievement is decreased.
	DecreaseProgressBy float32 `json:"decreaseProgressBy"`
	// The current progress of the customer in the achievement.
	CurrentProgress float32 `json:"currentProgress"`
}

// GetValue returns the Value field value
func (o *EffectProps) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// SetValue sets field value
func (o *EffectProps) SetValue(v float32) {
	o.Value = v
}

// GetId returns the Id field value
func (o *EffectProps) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// SetId sets field value
func (o *EffectProps) SetId(v int32) {
	o.Id = v
}

// GetRejectionReason returns the RejectionReason field value
func (o *EffectProps) GetRejectionReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RejectionReason
}

// SetRejectionReason sets field value
func (o *EffectProps) SetRejectionReason(v string) {
	o.RejectionReason = v
}

// GetConditionIndex returns the ConditionIndex field value if set, zero value otherwise.
func (o *EffectProps) GetConditionIndex() int32 {
	if o == nil || o.ConditionIndex == nil {
		var ret int32
		return ret
	}
	return *o.ConditionIndex
}

// GetConditionIndexOk returns a tuple with the ConditionIndex field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetConditionIndexOk() (int32, bool) {
	if o == nil || o.ConditionIndex == nil {
		var ret int32
		return ret, false
	}
	return *o.ConditionIndex, true
}

// HasConditionIndex returns a boolean if a field has been set.
func (o *EffectProps) HasConditionIndex() bool {
	if o != nil && o.ConditionIndex != nil {
		return true
	}

	return false
}

// SetConditionIndex gets a reference to the given int32 and assigns it to the ConditionIndex field.
func (o *EffectProps) SetConditionIndex(v int32) {
	o.ConditionIndex = &v
}

// GetEffectIndex returns the EffectIndex field value if set, zero value otherwise.
func (o *EffectProps) GetEffectIndex() int32 {
	if o == nil || o.EffectIndex == nil {
		var ret int32
		return ret
	}
	return *o.EffectIndex
}

// GetEffectIndexOk returns a tuple with the EffectIndex field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetEffectIndexOk() (int32, bool) {
	if o == nil || o.EffectIndex == nil {
		var ret int32
		return ret, false
	}
	return *o.EffectIndex, true
}

// HasEffectIndex returns a boolean if a field has been set.
func (o *EffectProps) HasEffectIndex() bool {
	if o != nil && o.EffectIndex != nil {
		return true
	}

	return false
}

// SetEffectIndex gets a reference to the given int32 and assigns it to the EffectIndex field.
func (o *EffectProps) SetEffectIndex(v int32) {
	o.EffectIndex = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *EffectProps) GetDetails() string {
	if o == nil || o.Details == nil {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetDetailsOk() (string, bool) {
	if o == nil || o.Details == nil {
		var ret string
		return ret, false
	}
	return *o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *EffectProps) HasDetails() bool {
	if o != nil && o.Details != nil {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *EffectProps) SetDetails(v string) {
	o.Details = &v
}

// GetCampaignExclusionReason returns the CampaignExclusionReason field value if set, zero value otherwise.
func (o *EffectProps) GetCampaignExclusionReason() string {
	if o == nil || o.CampaignExclusionReason == nil {
		var ret string
		return ret
	}
	return *o.CampaignExclusionReason
}

// GetCampaignExclusionReasonOk returns a tuple with the CampaignExclusionReason field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetCampaignExclusionReasonOk() (string, bool) {
	if o == nil || o.CampaignExclusionReason == nil {
		var ret string
		return ret, false
	}
	return *o.CampaignExclusionReason, true
}

// HasCampaignExclusionReason returns a boolean if a field has been set.
func (o *EffectProps) HasCampaignExclusionReason() bool {
	if o != nil && o.CampaignExclusionReason != nil {
		return true
	}

	return false
}

// SetCampaignExclusionReason gets a reference to the given string and assigns it to the CampaignExclusionReason field.
func (o *EffectProps) SetCampaignExclusionReason(v string) {
	o.CampaignExclusionReason = &v
}

// GetProfileId returns the ProfileId field value
func (o *EffectProps) GetProfileId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProfileId
}

// SetProfileId sets field value
func (o *EffectProps) SetProfileId(v int32) {
	o.ProfileId = v
}

// GetName returns the Name field value
func (o *EffectProps) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// SetName sets field value
func (o *EffectProps) SetName(v string) {
	o.Name = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *EffectProps) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetScopeOk() (string, bool) {
	if o == nil || o.Scope == nil {
		var ret string
		return ret, false
	}
	return *o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *EffectProps) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *EffectProps) SetScope(v string) {
	o.Scope = &v
}

// GetDesiredValue returns the DesiredValue field value if set, zero value otherwise.
func (o *EffectProps) GetDesiredValue() float32 {
	if o == nil || o.DesiredValue == nil {
		var ret float32
		return ret
	}
	return *o.DesiredValue
}

// GetDesiredValueOk returns a tuple with the DesiredValue field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetDesiredValueOk() (float32, bool) {
	if o == nil || o.DesiredValue == nil {
		var ret float32
		return ret, false
	}
	return *o.DesiredValue, true
}

// HasDesiredValue returns a boolean if a field has been set.
func (o *EffectProps) HasDesiredValue() bool {
	if o != nil && o.DesiredValue != nil {
		return true
	}

	return false
}

// SetDesiredValue gets a reference to the given float32 and assigns it to the DesiredValue field.
func (o *EffectProps) SetDesiredValue(v float32) {
	o.DesiredValue = &v
}

// GetPosition returns the Position field value
func (o *EffectProps) GetPosition() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Position
}

// SetPosition sets field value
func (o *EffectProps) SetPosition(v float32) {
	o.Position = v
}

// GetSubPosition returns the SubPosition field value if set, zero value otherwise.
func (o *EffectProps) GetSubPosition() float32 {
	if o == nil || o.SubPosition == nil {
		var ret float32
		return ret
	}
	return *o.SubPosition
}

// GetSubPositionOk returns a tuple with the SubPosition field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetSubPositionOk() (float32, bool) {
	if o == nil || o.SubPosition == nil {
		var ret float32
		return ret, false
	}
	return *o.SubPosition, true
}

// HasSubPosition returns a boolean if a field has been set.
func (o *EffectProps) HasSubPosition() bool {
	if o != nil && o.SubPosition != nil {
		return true
	}

	return false
}

// SetSubPosition gets a reference to the given float32 and assigns it to the SubPosition field.
func (o *EffectProps) SetSubPosition(v float32) {
	o.SubPosition = &v
}

// GetTotalDiscount returns the TotalDiscount field value if set, zero value otherwise.
func (o *EffectProps) GetTotalDiscount() float32 {
	if o == nil || o.TotalDiscount == nil {
		var ret float32
		return ret
	}
	return *o.TotalDiscount
}

// GetTotalDiscountOk returns a tuple with the TotalDiscount field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetTotalDiscountOk() (float32, bool) {
	if o == nil || o.TotalDiscount == nil {
		var ret float32
		return ret, false
	}
	return *o.TotalDiscount, true
}

// HasTotalDiscount returns a boolean if a field has been set.
func (o *EffectProps) HasTotalDiscount() bool {
	if o != nil && o.TotalDiscount != nil {
		return true
	}

	return false
}

// SetTotalDiscount gets a reference to the given float32 and assigns it to the TotalDiscount field.
func (o *EffectProps) SetTotalDiscount(v float32) {
	o.TotalDiscount = &v
}

// GetDesiredTotalDiscount returns the DesiredTotalDiscount field value if set, zero value otherwise.
func (o *EffectProps) GetDesiredTotalDiscount() float32 {
	if o == nil || o.DesiredTotalDiscount == nil {
		var ret float32
		return ret
	}
	return *o.DesiredTotalDiscount
}

// GetDesiredTotalDiscountOk returns a tuple with the DesiredTotalDiscount field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetDesiredTotalDiscountOk() (float32, bool) {
	if o == nil || o.DesiredTotalDiscount == nil {
		var ret float32
		return ret, false
	}
	return *o.DesiredTotalDiscount, true
}

// HasDesiredTotalDiscount returns a boolean if a field has been set.
func (o *EffectProps) HasDesiredTotalDiscount() bool {
	if o != nil && o.DesiredTotalDiscount != nil {
		return true
	}

	return false
}

// SetDesiredTotalDiscount gets a reference to the given float32 and assigns it to the DesiredTotalDiscount field.
func (o *EffectProps) SetDesiredTotalDiscount(v float32) {
	o.DesiredTotalDiscount = &v
}

// GetBundleIndex returns the BundleIndex field value if set, zero value otherwise.
func (o *EffectProps) GetBundleIndex() int32 {
	if o == nil || o.BundleIndex == nil {
		var ret int32
		return ret
	}
	return *o.BundleIndex
}

// GetBundleIndexOk returns a tuple with the BundleIndex field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetBundleIndexOk() (int32, bool) {
	if o == nil || o.BundleIndex == nil {
		var ret int32
		return ret, false
	}
	return *o.BundleIndex, true
}

// HasBundleIndex returns a boolean if a field has been set.
func (o *EffectProps) HasBundleIndex() bool {
	if o != nil && o.BundleIndex != nil {
		return true
	}

	return false
}

// SetBundleIndex gets a reference to the given int32 and assigns it to the BundleIndex field.
func (o *EffectProps) SetBundleIndex(v int32) {
	o.BundleIndex = &v
}

// GetBundleName returns the BundleName field value if set, zero value otherwise.
func (o *EffectProps) GetBundleName() string {
	if o == nil || o.BundleName == nil {
		var ret string
		return ret
	}
	return *o.BundleName
}

// GetBundleNameOk returns a tuple with the BundleName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetBundleNameOk() (string, bool) {
	if o == nil || o.BundleName == nil {
		var ret string
		return ret, false
	}
	return *o.BundleName, true
}

// HasBundleName returns a boolean if a field has been set.
func (o *EffectProps) HasBundleName() bool {
	if o != nil && o.BundleName != nil {
		return true
	}

	return false
}

// SetBundleName gets a reference to the given string and assigns it to the BundleName field.
func (o *EffectProps) SetBundleName(v string) {
	o.BundleName = &v
}

// GetTargetedItemPosition returns the TargetedItemPosition field value if set, zero value otherwise.
func (o *EffectProps) GetTargetedItemPosition() float32 {
	if o == nil || o.TargetedItemPosition == nil {
		var ret float32
		return ret
	}
	return *o.TargetedItemPosition
}

// GetTargetedItemPositionOk returns a tuple with the TargetedItemPosition field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetTargetedItemPositionOk() (float32, bool) {
	if o == nil || o.TargetedItemPosition == nil {
		var ret float32
		return ret, false
	}
	return *o.TargetedItemPosition, true
}

// HasTargetedItemPosition returns a boolean if a field has been set.
func (o *EffectProps) HasTargetedItemPosition() bool {
	if o != nil && o.TargetedItemPosition != nil {
		return true
	}

	return false
}

// SetTargetedItemPosition gets a reference to the given float32 and assigns it to the TargetedItemPosition field.
func (o *EffectProps) SetTargetedItemPosition(v float32) {
	o.TargetedItemPosition = &v
}

// GetTargetedItemSubPosition returns the TargetedItemSubPosition field value if set, zero value otherwise.
func (o *EffectProps) GetTargetedItemSubPosition() float32 {
	if o == nil || o.TargetedItemSubPosition == nil {
		var ret float32
		return ret
	}
	return *o.TargetedItemSubPosition
}

// GetTargetedItemSubPositionOk returns a tuple with the TargetedItemSubPosition field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetTargetedItemSubPositionOk() (float32, bool) {
	if o == nil || o.TargetedItemSubPosition == nil {
		var ret float32
		return ret, false
	}
	return *o.TargetedItemSubPosition, true
}

// HasTargetedItemSubPosition returns a boolean if a field has been set.
func (o *EffectProps) HasTargetedItemSubPosition() bool {
	if o != nil && o.TargetedItemSubPosition != nil {
		return true
	}

	return false
}

// SetTargetedItemSubPosition gets a reference to the given float32 and assigns it to the TargetedItemSubPosition field.
func (o *EffectProps) SetTargetedItemSubPosition(v float32) {
	o.TargetedItemSubPosition = &v
}

// GetAdditionalCostId returns the AdditionalCostId field value
func (o *EffectProps) GetAdditionalCostId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AdditionalCostId
}

// SetAdditionalCostId sets field value
func (o *EffectProps) SetAdditionalCostId(v int32) {
	o.AdditionalCostId = v
}

// GetAdditionalCost returns the AdditionalCost field value
func (o *EffectProps) GetAdditionalCost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdditionalCost
}

// SetAdditionalCost sets field value
func (o *EffectProps) SetAdditionalCost(v string) {
	o.AdditionalCost = v
}

// GetWebhookId returns the WebhookId field value
func (o *EffectProps) GetWebhookId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.WebhookId
}

// SetWebhookId sets field value
func (o *EffectProps) SetWebhookId(v float32) {
	o.WebhookId = v
}

// GetWebhookName returns the WebhookName field value
func (o *EffectProps) GetWebhookName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WebhookName
}

// SetWebhookName sets field value
func (o *EffectProps) SetWebhookName(v string) {
	o.WebhookName = v
}

// GetProgramId returns the ProgramId field value
func (o *EffectProps) GetProgramId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProgramId
}

// SetProgramId sets field value
func (o *EffectProps) SetProgramId(v int32) {
	o.ProgramId = v
}

// GetSubLedgerId returns the SubLedgerId field value
func (o *EffectProps) GetSubLedgerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubLedgerId
}

// SetSubLedgerId sets field value
func (o *EffectProps) SetSubLedgerId(v string) {
	o.SubLedgerId = v
}

// GetRecipientIntegrationId returns the RecipientIntegrationId field value
func (o *EffectProps) GetRecipientIntegrationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecipientIntegrationId
}

// SetRecipientIntegrationId sets field value
func (o *EffectProps) SetRecipientIntegrationId(v string) {
	o.RecipientIntegrationId = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *EffectProps) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetStartDateOk() (time.Time, bool) {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret, false
	}
	return *o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *EffectProps) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *EffectProps) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *EffectProps) GetExpiryDate() time.Time {
	if o == nil || o.ExpiryDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetExpiryDateOk() (time.Time, bool) {
	if o == nil || o.ExpiryDate == nil {
		var ret time.Time
		return ret, false
	}
	return *o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *EffectProps) HasExpiryDate() bool {
	if o != nil && o.ExpiryDate != nil {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given time.Time and assigns it to the ExpiryDate field.
func (o *EffectProps) SetExpiryDate(v time.Time) {
	o.ExpiryDate = &v
}

// GetTransactionUUID returns the TransactionUUID field value
func (o *EffectProps) GetTransactionUUID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionUUID
}

// SetTransactionUUID sets field value
func (o *EffectProps) SetTransactionUUID(v string) {
	o.TransactionUUID = v
}

// GetCartItemPosition returns the CartItemPosition field value if set, zero value otherwise.
func (o *EffectProps) GetCartItemPosition() float32 {
	if o == nil || o.CartItemPosition == nil {
		var ret float32
		return ret
	}
	return *o.CartItemPosition
}

// GetCartItemPositionOk returns a tuple with the CartItemPosition field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetCartItemPositionOk() (float32, bool) {
	if o == nil || o.CartItemPosition == nil {
		var ret float32
		return ret, false
	}
	return *o.CartItemPosition, true
}

// HasCartItemPosition returns a boolean if a field has been set.
func (o *EffectProps) HasCartItemPosition() bool {
	if o != nil && o.CartItemPosition != nil {
		return true
	}

	return false
}

// SetCartItemPosition gets a reference to the given float32 and assigns it to the CartItemPosition field.
func (o *EffectProps) SetCartItemPosition(v float32) {
	o.CartItemPosition = &v
}

// GetCartItemSubPosition returns the CartItemSubPosition field value if set, zero value otherwise.
func (o *EffectProps) GetCartItemSubPosition() float32 {
	if o == nil || o.CartItemSubPosition == nil {
		var ret float32
		return ret
	}
	return *o.CartItemSubPosition
}

// GetCartItemSubPositionOk returns a tuple with the CartItemSubPosition field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetCartItemSubPositionOk() (float32, bool) {
	if o == nil || o.CartItemSubPosition == nil {
		var ret float32
		return ret, false
	}
	return *o.CartItemSubPosition, true
}

// HasCartItemSubPosition returns a boolean if a field has been set.
func (o *EffectProps) HasCartItemSubPosition() bool {
	if o != nil && o.CartItemSubPosition != nil {
		return true
	}

	return false
}

// SetCartItemSubPosition gets a reference to the given float32 and assigns it to the CartItemSubPosition field.
func (o *EffectProps) SetCartItemSubPosition(v float32) {
	o.CartItemSubPosition = &v
}

// GetCardIdentifier returns the CardIdentifier field value if set, zero value otherwise.
func (o *EffectProps) GetCardIdentifier() string {
	if o == nil || o.CardIdentifier == nil {
		var ret string
		return ret
	}
	return *o.CardIdentifier
}

// GetCardIdentifierOk returns a tuple with the CardIdentifier field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetCardIdentifierOk() (string, bool) {
	if o == nil || o.CardIdentifier == nil {
		var ret string
		return ret, false
	}
	return *o.CardIdentifier, true
}

// HasCardIdentifier returns a boolean if a field has been set.
func (o *EffectProps) HasCardIdentifier() bool {
	if o != nil && o.CardIdentifier != nil {
		return true
	}

	return false
}

// SetCardIdentifier gets a reference to the given string and assigns it to the CardIdentifier field.
func (o *EffectProps) SetCardIdentifier(v string) {
	o.CardIdentifier = &v
}

// GetRuleTitle returns the RuleTitle field value
func (o *EffectProps) GetRuleTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RuleTitle
}

// SetRuleTitle sets field value
func (o *EffectProps) SetRuleTitle(v string) {
	o.RuleTitle = v
}

// GetPreviousTierName returns the PreviousTierName field value if set, zero value otherwise.
func (o *EffectProps) GetPreviousTierName() string {
	if o == nil || o.PreviousTierName == nil {
		var ret string
		return ret
	}
	return *o.PreviousTierName
}

// GetPreviousTierNameOk returns a tuple with the PreviousTierName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetPreviousTierNameOk() (string, bool) {
	if o == nil || o.PreviousTierName == nil {
		var ret string
		return ret, false
	}
	return *o.PreviousTierName, true
}

// HasPreviousTierName returns a boolean if a field has been set.
func (o *EffectProps) HasPreviousTierName() bool {
	if o != nil && o.PreviousTierName != nil {
		return true
	}

	return false
}

// SetPreviousTierName gets a reference to the given string and assigns it to the PreviousTierName field.
func (o *EffectProps) SetPreviousTierName(v string) {
	o.PreviousTierName = &v
}

// GetNewTierName returns the NewTierName field value
func (o *EffectProps) GetNewTierName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewTierName
}

// SetNewTierName sets field value
func (o *EffectProps) SetNewTierName(v string) {
	o.NewTierName = v
}

// GetSku returns the Sku field value
func (o *EffectProps) GetSku() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sku
}

// SetSku sets field value
func (o *EffectProps) SetSku(v string) {
	o.Sku = v
}

// GetNotificationType returns the NotificationType field value
func (o *EffectProps) GetNotificationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotificationType
}

// SetNotificationType sets field value
func (o *EffectProps) SetNotificationType(v string) {
	o.NotificationType = v
}

// GetTitle returns the Title field value
func (o *EffectProps) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// SetTitle sets field value
func (o *EffectProps) SetTitle(v string) {
	o.Title = v
}

// GetBody returns the Body field value
func (o *EffectProps) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// SetBody sets field value
func (o *EffectProps) SetBody(v string) {
	o.Body = v
}

// GetPath returns the Path field value
func (o *EffectProps) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// SetPath sets field value
func (o *EffectProps) SetPath(v string) {
	o.Path = v
}

// GetDescription returns the Description field value
func (o *EffectProps) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// SetDescription sets field value
func (o *EffectProps) SetDescription(v string) {
	o.Description = v
}

// GetBundleAttributes returns the BundleAttributes field value
func (o *EffectProps) GetBundleAttributes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.BundleAttributes
}

// SetBundleAttributes sets field value
func (o *EffectProps) SetBundleAttributes(v []string) {
	o.BundleAttributes = v
}

// GetItemsIndices returns the ItemsIndices field value
func (o *EffectProps) GetItemsIndices() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}

	return o.ItemsIndices
}

// SetItemsIndices sets field value
func (o *EffectProps) SetItemsIndices(v []float32) {
	o.ItemsIndices = v
}

// GetPoolId returns the PoolId field value
func (o *EffectProps) GetPoolId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PoolId
}

// SetPoolId sets field value
func (o *EffectProps) SetPoolId(v int32) {
	o.PoolId = v
}

// GetPoolName returns the PoolName field value
func (o *EffectProps) GetPoolName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolName
}

// SetPoolName sets field value
func (o *EffectProps) SetPoolName(v string) {
	o.PoolName = v
}

// GetGiveawayId returns the GiveawayId field value
func (o *EffectProps) GetGiveawayId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GiveawayId
}

// SetGiveawayId sets field value
func (o *EffectProps) SetGiveawayId(v int32) {
	o.GiveawayId = v
}

// GetCode returns the Code field value
func (o *EffectProps) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// SetCode sets field value
func (o *EffectProps) SetCode(v string) {
	o.Code = v
}

// GetMessage returns the Message field value
func (o *EffectProps) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// SetMessage sets field value
func (o *EffectProps) SetMessage(v string) {
	o.Message = v
}

// GetEffectId returns the EffectId field value
func (o *EffectProps) GetEffectId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EffectId
}

// SetEffectId sets field value
func (o *EffectProps) SetEffectId(v int32) {
	o.EffectId = v
}

// GetPayload returns the Payload field value
func (o *EffectProps) GetPayload() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Payload
}

// SetPayload sets field value
func (o *EffectProps) SetPayload(v map[string]map[string]interface{}) {
	o.Payload = v
}

// GetCouponValue returns the CouponValue field value
func (o *EffectProps) GetCouponValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CouponValue
}

// SetCouponValue sets field value
func (o *EffectProps) SetCouponValue(v string) {
	o.CouponValue = v
}

// GetProfileIntegrationId returns the ProfileIntegrationId field value
func (o *EffectProps) GetProfileIntegrationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProfileIntegrationId
}

// SetProfileIntegrationId sets field value
func (o *EffectProps) SetProfileIntegrationId(v string) {
	o.ProfileIntegrationId = v
}

// GetIsNewReservation returns the IsNewReservation field value
func (o *EffectProps) GetIsNewReservation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsNewReservation
}

// SetIsNewReservation sets field value
func (o *EffectProps) SetIsNewReservation(v bool) {
	o.IsNewReservation = v
}

// GetAudienceId returns the AudienceId field value if set, zero value otherwise.
func (o *EffectProps) GetAudienceId() int32 {
	if o == nil || o.AudienceId == nil {
		var ret int32
		return ret
	}
	return *o.AudienceId
}

// GetAudienceIdOk returns a tuple with the AudienceId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetAudienceIdOk() (int32, bool) {
	if o == nil || o.AudienceId == nil {
		var ret int32
		return ret, false
	}
	return *o.AudienceId, true
}

// HasAudienceId returns a boolean if a field has been set.
func (o *EffectProps) HasAudienceId() bool {
	if o != nil && o.AudienceId != nil {
		return true
	}

	return false
}

// SetAudienceId gets a reference to the given int32 and assigns it to the AudienceId field.
func (o *EffectProps) SetAudienceId(v int32) {
	o.AudienceId = &v
}

// GetAudienceName returns the AudienceName field value if set, zero value otherwise.
func (o *EffectProps) GetAudienceName() string {
	if o == nil || o.AudienceName == nil {
		var ret string
		return ret
	}
	return *o.AudienceName
}

// GetAudienceNameOk returns a tuple with the AudienceName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *EffectProps) GetAudienceNameOk() (string, bool) {
	if o == nil || o.AudienceName == nil {
		var ret string
		return ret, false
	}
	return *o.AudienceName, true
}

// HasAudienceName returns a boolean if a field has been set.
func (o *EffectProps) HasAudienceName() bool {
	if o != nil && o.AudienceName != nil {
		return true
	}

	return false
}

// SetAudienceName gets a reference to the given string and assigns it to the AudienceName field.
func (o *EffectProps) SetAudienceName(v string) {
	o.AudienceName = &v
}

// GetAchievementId returns the AchievementId field value
func (o *EffectProps) GetAchievementId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AchievementId
}

// SetAchievementId sets field value
func (o *EffectProps) SetAchievementId(v int32) {
	o.AchievementId = v
}

// GetAchievementName returns the AchievementName field value
func (o *EffectProps) GetAchievementName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AchievementName
}

// SetAchievementName sets field value
func (o *EffectProps) SetAchievementName(v string) {
	o.AchievementName = v
}

// GetProgressTrackerId returns the ProgressTrackerId field value
func (o *EffectProps) GetProgressTrackerId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProgressTrackerId
}

// SetProgressTrackerId sets field value
func (o *EffectProps) SetProgressTrackerId(v int32) {
	o.ProgressTrackerId = v
}

// GetDelta returns the Delta field value
func (o *EffectProps) GetDelta() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Delta
}

// SetDelta sets field value
func (o *EffectProps) SetDelta(v float32) {
	o.Delta = v
}

// GetTarget returns the Target field value
func (o *EffectProps) GetTarget() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Target
}

// SetTarget sets field value
func (o *EffectProps) SetTarget(v float32) {
	o.Target = v
}

// GetIsJustCompleted returns the IsJustCompleted field value
func (o *EffectProps) GetIsJustCompleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsJustCompleted
}

// SetIsJustCompleted sets field value
func (o *EffectProps) SetIsJustCompleted(v bool) {
	o.IsJustCompleted = v
}

// GetDecreaseProgressBy returns the DecreaseProgressBy field value
func (o *EffectProps) GetDecreaseProgressBy() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DecreaseProgressBy
}

// SetDecreaseProgressBy sets field value
func (o *EffectProps) SetDecreaseProgressBy(v float32) {
	o.DecreaseProgressBy = v
}

// GetCurrentProgress returns the CurrentProgress field value
func (o *EffectProps) GetCurrentProgress() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CurrentProgress
}

// SetCurrentProgress sets field value
func (o *EffectProps) SetCurrentProgress(v float32) {
	o.CurrentProgress = v
}

type NullableEffectProps struct {
	Value EffectProps
	ExplicitNull bool
}

func (v NullableEffectProps) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableEffectProps) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
