/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * API version:
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
	"time"
)

// StrikethroughTrigger Information about the event that triggered the strikethrough labeling.
type StrikethroughTrigger struct {
	// The ID of the event that triggered the strikethrough labeling.
	Id int32 `json:"id"`
	// The type of event that triggered the strikethrough labeling.
	Type string `json:"type"`
	// The creation time of the event that triggered the strikethrough labeling.
	TriggeredAt time.Time `json:"triggeredAt"`
	// The total number of items affected by the event that triggered the strikethrough labeling.
	TotalAffectedItems int32 `json:"totalAffectedItems"`
	// The arbitrary properties associated with this trigger type.
	Payload map[string]interface{} `json:"payload"`
}

// GetId returns the Id field value
func (o *StrikethroughTrigger) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// SetId sets field value
func (o *StrikethroughTrigger) SetId(v int32) {
	o.Id = v
}

// GetType returns the Type field value
func (o *StrikethroughTrigger) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// SetType sets field value
func (o *StrikethroughTrigger) SetType(v string) {
	o.Type = v
}

// GetTriggeredAt returns the TriggeredAt field value
func (o *StrikethroughTrigger) GetTriggeredAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.TriggeredAt
}

// SetTriggeredAt sets field value
func (o *StrikethroughTrigger) SetTriggeredAt(v time.Time) {
	o.TriggeredAt = v
}

// GetTotalAffectedItems returns the TotalAffectedItems field value
func (o *StrikethroughTrigger) GetTotalAffectedItems() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalAffectedItems
}

// SetTotalAffectedItems sets field value
func (o *StrikethroughTrigger) SetTotalAffectedItems(v int32) {
	o.TotalAffectedItems = v
}

// GetPayload returns the Payload field value
func (o *StrikethroughTrigger) GetPayload() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Payload
}

// SetPayload sets field value
func (o *StrikethroughTrigger) SetPayload(v map[string]interface{}) {
	o.Payload = v
}

type NullableStrikethroughTrigger struct {
	Value        StrikethroughTrigger
	ExplicitNull bool
}

func (v NullableStrikethroughTrigger) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableStrikethroughTrigger) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
