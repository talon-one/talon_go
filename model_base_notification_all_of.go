/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// BaseNotificationAllOf struct for BaseNotificationAllOf
type BaseNotificationAllOf struct {
	Webhook BaseNotificationWebhook `json:"webhook"`
	// Unique ID for this entity.
	Id int32 `json:"id"`
	// The notification type.
	Type string `json:"type"`
}

// GetWebhook returns the Webhook field value
func (o *BaseNotificationAllOf) GetWebhook() BaseNotificationWebhook {
	if o == nil {
		var ret BaseNotificationWebhook
		return ret
	}

	return o.Webhook
}

// SetWebhook sets field value
func (o *BaseNotificationAllOf) SetWebhook(v BaseNotificationWebhook) {
	o.Webhook = v
}

// GetId returns the Id field value
func (o *BaseNotificationAllOf) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// SetId sets field value
func (o *BaseNotificationAllOf) SetId(v int32) {
	o.Id = v
}

// GetType returns the Type field value
func (o *BaseNotificationAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// SetType sets field value
func (o *BaseNotificationAllOf) SetType(v string) {
	o.Type = v
}

type NullableBaseNotificationAllOf struct {
	Value BaseNotificationAllOf
	ExplicitNull bool
}

func (v NullableBaseNotificationAllOf) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableBaseNotificationAllOf) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
