/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}`
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
	"time"
)

// ApplicationEvent
type ApplicationEvent struct {
	// Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.
	Id int32 `json:"id"`
	// The exact moment this entity was created.
	Created time.Time `json:"created"`
	// The ID of the application that owns this entity.
	ApplicationId int32 `json:"applicationId"`
	// The globally unique Talon.One ID of the customer that created this entity.
	ProfileId *int32 `json:"profileId,omitempty"`
	// The globally unique Talon.One ID of the session that contains this event.
	SessionId *int32 `json:"sessionId,omitempty"`
	// A string representing the event. Must not be a reserved event name.
	Type string `json:"type"`
	// Additional JSON serialized data associated with the event.
	Attributes map[string]interface{} `json:"attributes"`
	// An array containing the effects that were applied as a result of this event.
	Effects [][]interface{} `json:"effects"`
	// An array containing the rule failure reasons which happened during this event.
	RuleFailureReasons *[]RuleFailureReason `json:"ruleFailureReasons,omitempty"`
}

// GetId returns the Id field value
func (o *ApplicationEvent) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// SetId sets field value
func (o *ApplicationEvent) SetId(v int32) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *ApplicationEvent) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// SetCreated sets field value
func (o *ApplicationEvent) SetCreated(v time.Time) {
	o.Created = v
}

// GetApplicationId returns the ApplicationId field value
func (o *ApplicationEvent) GetApplicationId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ApplicationId
}

// SetApplicationId sets field value
func (o *ApplicationEvent) SetApplicationId(v int32) {
	o.ApplicationId = v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *ApplicationEvent) GetProfileId() int32 {
	if o == nil || o.ProfileId == nil {
		var ret int32
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationEvent) GetProfileIdOk() (int32, bool) {
	if o == nil || o.ProfileId == nil {
		var ret int32
		return ret, false
	}
	return *o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *ApplicationEvent) HasProfileId() bool {
	if o != nil && o.ProfileId != nil {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given int32 and assigns it to the ProfileId field.
func (o *ApplicationEvent) SetProfileId(v int32) {
	o.ProfileId = &v
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *ApplicationEvent) GetSessionId() int32 {
	if o == nil || o.SessionId == nil {
		var ret int32
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationEvent) GetSessionIdOk() (int32, bool) {
	if o == nil || o.SessionId == nil {
		var ret int32
		return ret, false
	}
	return *o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *ApplicationEvent) HasSessionId() bool {
	if o != nil && o.SessionId != nil {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given int32 and assigns it to the SessionId field.
func (o *ApplicationEvent) SetSessionId(v int32) {
	o.SessionId = &v
}

// GetType returns the Type field value
func (o *ApplicationEvent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// SetType sets field value
func (o *ApplicationEvent) SetType(v string) {
	o.Type = v
}

// GetAttributes returns the Attributes field value
func (o *ApplicationEvent) GetAttributes() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Attributes
}

// SetAttributes sets field value
func (o *ApplicationEvent) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

// GetEffects returns the Effects field value
func (o *ApplicationEvent) GetEffects() [][]interface{} {
	if o == nil {
		var ret [][]interface{}
		return ret
	}

	return o.Effects
}

// SetEffects sets field value
func (o *ApplicationEvent) SetEffects(v [][]interface{}) {
	o.Effects = v
}

// GetRuleFailureReasons returns the RuleFailureReasons field value if set, zero value otherwise.
func (o *ApplicationEvent) GetRuleFailureReasons() []RuleFailureReason {
	if o == nil || o.RuleFailureReasons == nil {
		var ret []RuleFailureReason
		return ret
	}
	return *o.RuleFailureReasons
}

// GetRuleFailureReasonsOk returns a tuple with the RuleFailureReasons field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationEvent) GetRuleFailureReasonsOk() ([]RuleFailureReason, bool) {
	if o == nil || o.RuleFailureReasons == nil {
		var ret []RuleFailureReason
		return ret, false
	}
	return *o.RuleFailureReasons, true
}

// HasRuleFailureReasons returns a boolean if a field has been set.
func (o *ApplicationEvent) HasRuleFailureReasons() bool {
	if o != nil && o.RuleFailureReasons != nil {
		return true
	}

	return false
}

// SetRuleFailureReasons gets a reference to the given []RuleFailureReason and assigns it to the RuleFailureReasons field.
func (o *ApplicationEvent) SetRuleFailureReasons(v []RuleFailureReason) {
	o.RuleFailureReasons = &v
}

type NullableApplicationEvent struct {
	Value        ApplicationEvent
	ExplicitNull bool
}

func (v NullableApplicationEvent) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableApplicationEvent) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
