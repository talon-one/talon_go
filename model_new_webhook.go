/*
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// NewWebhook
type NewWebhook struct {
	// The IDs of the applications that are related to this entity.
	ApplicationIds []int32 `json:"applicationIds"`
	// Friendly title for this webhook
	Title string `json:"title"`
	// API method for this webhook
	Verb string `json:"verb"`
	// API url (supports templating using parameters) for this webhook
	Url string `json:"url"`
	// List of API HTTP headers for this webhook
	Headers []string `json:"headers"`
	// API payload (supports templating using parameters) for this webhook
	Payload *string `json:"payload,omitempty"`
	// Array of template argument definitions
	Params []TemplateArgDef `json:"params"`
	// Enables or disables webhook from showing in rule builder
	Enabled bool `json:"enabled"`
}

// GetApplicationIds returns the ApplicationIds field value
func (o *NewWebhook) GetApplicationIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.ApplicationIds
}

// SetApplicationIds sets field value
func (o *NewWebhook) SetApplicationIds(v []int32) {
	o.ApplicationIds = v
}

// GetTitle returns the Title field value
func (o *NewWebhook) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// SetTitle sets field value
func (o *NewWebhook) SetTitle(v string) {
	o.Title = v
}

// GetVerb returns the Verb field value
func (o *NewWebhook) GetVerb() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Verb
}

// SetVerb sets field value
func (o *NewWebhook) SetVerb(v string) {
	o.Verb = v
}

// GetUrl returns the Url field value
func (o *NewWebhook) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// SetUrl sets field value
func (o *NewWebhook) SetUrl(v string) {
	o.Url = v
}

// GetHeaders returns the Headers field value
func (o *NewWebhook) GetHeaders() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Headers
}

// SetHeaders sets field value
func (o *NewWebhook) SetHeaders(v []string) {
	o.Headers = v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *NewWebhook) GetPayload() string {
	if o == nil || o.Payload == nil {
		var ret string
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewWebhook) GetPayloadOk() (string, bool) {
	if o == nil || o.Payload == nil {
		var ret string
		return ret, false
	}
	return *o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *NewWebhook) HasPayload() bool {
	if o != nil && o.Payload != nil {
		return true
	}

	return false
}

// SetPayload gets a reference to the given string and assigns it to the Payload field.
func (o *NewWebhook) SetPayload(v string) {
	o.Payload = &v
}

// GetParams returns the Params field value
func (o *NewWebhook) GetParams() []TemplateArgDef {
	if o == nil {
		var ret []TemplateArgDef
		return ret
	}

	return o.Params
}

// SetParams sets field value
func (o *NewWebhook) SetParams(v []TemplateArgDef) {
	o.Params = v
}

// GetEnabled returns the Enabled field value
func (o *NewWebhook) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// SetEnabled sets field value
func (o *NewWebhook) SetEnabled(v bool) {
	o.Enabled = v
}

type NullableNewWebhook struct {
	Value        NewWebhook
	ExplicitNull bool
}

func (v NullableNewWebhook) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableNewWebhook) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
