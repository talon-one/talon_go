/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * API version:
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
	"time"
)

// AchievementProgress The current progress of the customer in the achievement.
type AchievementProgress struct {
	// The status of the achievement.
	Status string `json:"status"`
	// The current progress of the customer in the achievement.
	Progress float32 `json:"progress"`
	// Timestamp at which the customer started the achievement.
	StartDate *time.Time `json:"startDate,omitempty"`
	// Timestamp at which point the customer completed the achievement.
	CompletionDate *time.Time `json:"completionDate,omitempty"`
	// Timestamp at which point the achievement ends and resets for the customer.
	EndDate *time.Time `json:"endDate,omitempty"`
}

// GetStatus returns the Status field value
func (o *AchievementProgress) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// SetStatus sets field value
func (o *AchievementProgress) SetStatus(v string) {
	o.Status = v
}

// GetProgress returns the Progress field value
func (o *AchievementProgress) GetProgress() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Progress
}

// SetProgress sets field value
func (o *AchievementProgress) SetProgress(v float32) {
	o.Progress = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *AchievementProgress) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AchievementProgress) GetStartDateOk() (time.Time, bool) {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret, false
	}
	return *o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *AchievementProgress) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *AchievementProgress) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetCompletionDate returns the CompletionDate field value if set, zero value otherwise.
func (o *AchievementProgress) GetCompletionDate() time.Time {
	if o == nil || o.CompletionDate == nil {
		var ret time.Time
		return ret
	}
	return *o.CompletionDate
}

// GetCompletionDateOk returns a tuple with the CompletionDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AchievementProgress) GetCompletionDateOk() (time.Time, bool) {
	if o == nil || o.CompletionDate == nil {
		var ret time.Time
		return ret, false
	}
	return *o.CompletionDate, true
}

// HasCompletionDate returns a boolean if a field has been set.
func (o *AchievementProgress) HasCompletionDate() bool {
	if o != nil && o.CompletionDate != nil {
		return true
	}

	return false
}

// SetCompletionDate gets a reference to the given time.Time and assigns it to the CompletionDate field.
func (o *AchievementProgress) SetCompletionDate(v time.Time) {
	o.CompletionDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *AchievementProgress) GetEndDate() time.Time {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AchievementProgress) GetEndDateOk() (time.Time, bool) {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret, false
	}
	return *o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *AchievementProgress) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *AchievementProgress) SetEndDate(v time.Time) {
	o.EndDate = &v
}

type NullableAchievementProgress struct {
	Value        AchievementProgress
	ExplicitNull bool
}

func (v NullableAchievementProgress) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableAchievementProgress) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
