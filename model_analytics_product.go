/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * API version:
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// AnalyticsProduct struct for AnalyticsProduct
type AnalyticsProduct struct {
	// The ID of the analytics-level product.
	Id int32 `json:"id"`
	// Indicates whether the analytics-level product is connected to a catalog and also has a product name.
	IsPreliminary bool `json:"isPreliminary"`
	// The name of the analytics-level product.
	Name string `json:"name"`
	// The ID of the catalog. You can find the ID in the Campaign Manager in **Account** > **Tools** > **Cart item catalogs**.
	CatalogId *int32 `json:"catalogId,omitempty"`
}

// GetId returns the Id field value
func (o *AnalyticsProduct) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// SetId sets field value
func (o *AnalyticsProduct) SetId(v int32) {
	o.Id = v
}

// GetIsPreliminary returns the IsPreliminary field value
func (o *AnalyticsProduct) GetIsPreliminary() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPreliminary
}

// SetIsPreliminary sets field value
func (o *AnalyticsProduct) SetIsPreliminary(v bool) {
	o.IsPreliminary = v
}

// GetName returns the Name field value
func (o *AnalyticsProduct) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// SetName sets field value
func (o *AnalyticsProduct) SetName(v string) {
	o.Name = v
}

// GetCatalogId returns the CatalogId field value if set, zero value otherwise.
func (o *AnalyticsProduct) GetCatalogId() int32 {
	if o == nil || o.CatalogId == nil {
		var ret int32
		return ret
	}
	return *o.CatalogId
}

// GetCatalogIdOk returns a tuple with the CatalogId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsProduct) GetCatalogIdOk() (int32, bool) {
	if o == nil || o.CatalogId == nil {
		var ret int32
		return ret, false
	}
	return *o.CatalogId, true
}

// HasCatalogId returns a boolean if a field has been set.
func (o *AnalyticsProduct) HasCatalogId() bool {
	if o != nil && o.CatalogId != nil {
		return true
	}

	return false
}

// SetCatalogId gets a reference to the given int32 and assigns it to the CatalogId field.
func (o *AnalyticsProduct) SetCatalogId(v int32) {
	o.CatalogId = &v
}

type NullableAnalyticsProduct struct {
	Value        AnalyticsProduct
	ExplicitNull bool
}

func (v NullableAnalyticsProduct) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableAnalyticsProduct) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
