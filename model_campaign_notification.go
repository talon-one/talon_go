/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
	"time"
)

// CampaignNotification struct for CampaignNotification
type CampaignNotification struct {
	// The type of the event. Can be one of the following: ['campaign_state_changed', 'campaign_ruleset_changed', 'campaign_edited', 'campaign_created', 'campaign_deleted'] 
	Event string `json:"event"`
	Campaign Campaign `json:"campaign"`
	// The campaign's old state. Can be one of the following: ['running', 'disabled', 'scheduled', 'expired', 'draft', 'archived'] 
	OldState string `json:"oldState"`
	// The campaign's new state. Can be one of the following: ['running', 'disabled', 'scheduled', 'expired', 'draft', 'archived'] 
	NewState string `json:"newState"`
	Ruleset *Ruleset `json:"ruleset,omitempty"`
	OldRuleset *Ruleset `json:"oldRuleset,omitempty"`
	OldCampaign Campaign `json:"oldCampaign"`
	EvaluationPosition CampaignEvaluationPosition `json:"evaluationPosition"`
	// Time when the campaign was deleted.
	DeletedAt time.Time `json:"deletedAt"`
}

// GetEvent returns the Event field value
func (o *CampaignNotification) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// SetEvent sets field value
func (o *CampaignNotification) SetEvent(v string) {
	o.Event = v
}

// GetCampaign returns the Campaign field value
func (o *CampaignNotification) GetCampaign() Campaign {
	if o == nil {
		var ret Campaign
		return ret
	}

	return o.Campaign
}

// SetCampaign sets field value
func (o *CampaignNotification) SetCampaign(v Campaign) {
	o.Campaign = v
}

// GetOldState returns the OldState field value
func (o *CampaignNotification) GetOldState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OldState
}

// SetOldState sets field value
func (o *CampaignNotification) SetOldState(v string) {
	o.OldState = v
}

// GetNewState returns the NewState field value
func (o *CampaignNotification) GetNewState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewState
}

// SetNewState sets field value
func (o *CampaignNotification) SetNewState(v string) {
	o.NewState = v
}

// GetRuleset returns the Ruleset field value if set, zero value otherwise.
func (o *CampaignNotification) GetRuleset() Ruleset {
	if o == nil || o.Ruleset == nil {
		var ret Ruleset
		return ret
	}
	return *o.Ruleset
}

// GetRulesetOk returns a tuple with the Ruleset field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CampaignNotification) GetRulesetOk() (Ruleset, bool) {
	if o == nil || o.Ruleset == nil {
		var ret Ruleset
		return ret, false
	}
	return *o.Ruleset, true
}

// HasRuleset returns a boolean if a field has been set.
func (o *CampaignNotification) HasRuleset() bool {
	if o != nil && o.Ruleset != nil {
		return true
	}

	return false
}

// SetRuleset gets a reference to the given Ruleset and assigns it to the Ruleset field.
func (o *CampaignNotification) SetRuleset(v Ruleset) {
	o.Ruleset = &v
}

// GetOldRuleset returns the OldRuleset field value if set, zero value otherwise.
func (o *CampaignNotification) GetOldRuleset() Ruleset {
	if o == nil || o.OldRuleset == nil {
		var ret Ruleset
		return ret
	}
	return *o.OldRuleset
}

// GetOldRulesetOk returns a tuple with the OldRuleset field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CampaignNotification) GetOldRulesetOk() (Ruleset, bool) {
	if o == nil || o.OldRuleset == nil {
		var ret Ruleset
		return ret, false
	}
	return *o.OldRuleset, true
}

// HasOldRuleset returns a boolean if a field has been set.
func (o *CampaignNotification) HasOldRuleset() bool {
	if o != nil && o.OldRuleset != nil {
		return true
	}

	return false
}

// SetOldRuleset gets a reference to the given Ruleset and assigns it to the OldRuleset field.
func (o *CampaignNotification) SetOldRuleset(v Ruleset) {
	o.OldRuleset = &v
}

// GetOldCampaign returns the OldCampaign field value
func (o *CampaignNotification) GetOldCampaign() Campaign {
	if o == nil {
		var ret Campaign
		return ret
	}

	return o.OldCampaign
}

// SetOldCampaign sets field value
func (o *CampaignNotification) SetOldCampaign(v Campaign) {
	o.OldCampaign = v
}

// GetEvaluationPosition returns the EvaluationPosition field value
func (o *CampaignNotification) GetEvaluationPosition() CampaignEvaluationPosition {
	if o == nil {
		var ret CampaignEvaluationPosition
		return ret
	}

	return o.EvaluationPosition
}

// SetEvaluationPosition sets field value
func (o *CampaignNotification) SetEvaluationPosition(v CampaignEvaluationPosition) {
	o.EvaluationPosition = v
}

// GetDeletedAt returns the DeletedAt field value
func (o *CampaignNotification) GetDeletedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DeletedAt
}

// SetDeletedAt sets field value
func (o *CampaignNotification) SetDeletedAt(v time.Time) {
	o.DeletedAt = v
}

type NullableCampaignNotification struct {
	Value CampaignNotification
	ExplicitNull bool
}

func (v NullableCampaignNotification) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableCampaignNotification) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
