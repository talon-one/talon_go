/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * API version:
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// StrikethroughEffect The effect produced for the catalog item.
type StrikethroughEffect struct {
	// The ID of the campaign that effect belongs to.
	CampaignId int32 `json:"campaignId"`
	// The ID of the ruleset containing the rule that triggered this effect.
	RulesetId int32 `json:"rulesetId"`
	// The position of the rule that triggered this effect within the ruleset.
	RuleIndex int32 `json:"ruleIndex"`
	// The name of the rule that triggered this effect.
	RuleName string `json:"ruleName"`
	// The type of this effect.
	Type  string                 `json:"type"`
	Props map[string]interface{} `json:"props"`
}

// GetCampaignId returns the CampaignId field value
func (o *StrikethroughEffect) GetCampaignId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CampaignId
}

// SetCampaignId sets field value
func (o *StrikethroughEffect) SetCampaignId(v int32) {
	o.CampaignId = v
}

// GetRulesetId returns the RulesetId field value
func (o *StrikethroughEffect) GetRulesetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RulesetId
}

// SetRulesetId sets field value
func (o *StrikethroughEffect) SetRulesetId(v int32) {
	o.RulesetId = v
}

// GetRuleIndex returns the RuleIndex field value
func (o *StrikethroughEffect) GetRuleIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RuleIndex
}

// SetRuleIndex sets field value
func (o *StrikethroughEffect) SetRuleIndex(v int32) {
	o.RuleIndex = v
}

// GetRuleName returns the RuleName field value
func (o *StrikethroughEffect) GetRuleName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RuleName
}

// SetRuleName sets field value
func (o *StrikethroughEffect) SetRuleName(v string) {
	o.RuleName = v
}

// GetType returns the Type field value
func (o *StrikethroughEffect) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// SetType sets field value
func (o *StrikethroughEffect) SetType(v string) {
	o.Type = v
}

// GetProps returns the Props field value
func (o *StrikethroughEffect) GetProps() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Props
}

// SetProps sets field value
func (o *StrikethroughEffect) SetProps(v map[string]interface{}) {
	o.Props = v
}

type NullableStrikethroughEffect struct {
	Value        StrikethroughEffect
	ExplicitNull bool
}

func (v NullableStrikethroughEffect) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableStrikethroughEffect) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
