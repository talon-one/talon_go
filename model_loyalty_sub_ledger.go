/*
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// LoyaltySubLedger Ledger of Balance in Loyalty Program for a Customer
type LoyaltySubLedger struct {
	Total float32 `json:"total"`
	// Transactions contains a list of all events that have happened such as additions, subtractions and expiries
	Transactions *[]LoyaltyLedgerEntry `json:"transactions,omitempty"`
	// ExpiringPoints contains a list of all points that will expiry and when
	ExpiringPoints *[]LoyaltyLedgerEntry `json:"expiringPoints,omitempty"`
}

// GetTotal returns the Total field value
func (o *LoyaltySubLedger) GetTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Total
}

// SetTotal sets field value
func (o *LoyaltySubLedger) SetTotal(v float32) {
	o.Total = v
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *LoyaltySubLedger) GetTransactions() []LoyaltyLedgerEntry {
	if o == nil || o.Transactions == nil {
		var ret []LoyaltyLedgerEntry
		return ret
	}
	return *o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltySubLedger) GetTransactionsOk() ([]LoyaltyLedgerEntry, bool) {
	if o == nil || o.Transactions == nil {
		var ret []LoyaltyLedgerEntry
		return ret, false
	}
	return *o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *LoyaltySubLedger) HasTransactions() bool {
	if o != nil && o.Transactions != nil {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []LoyaltyLedgerEntry and assigns it to the Transactions field.
func (o *LoyaltySubLedger) SetTransactions(v []LoyaltyLedgerEntry) {
	o.Transactions = &v
}

// GetExpiringPoints returns the ExpiringPoints field value if set, zero value otherwise.
func (o *LoyaltySubLedger) GetExpiringPoints() []LoyaltyLedgerEntry {
	if o == nil || o.ExpiringPoints == nil {
		var ret []LoyaltyLedgerEntry
		return ret
	}
	return *o.ExpiringPoints
}

// GetExpiringPointsOk returns a tuple with the ExpiringPoints field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltySubLedger) GetExpiringPointsOk() ([]LoyaltyLedgerEntry, bool) {
	if o == nil || o.ExpiringPoints == nil {
		var ret []LoyaltyLedgerEntry
		return ret, false
	}
	return *o.ExpiringPoints, true
}

// HasExpiringPoints returns a boolean if a field has been set.
func (o *LoyaltySubLedger) HasExpiringPoints() bool {
	if o != nil && o.ExpiringPoints != nil {
		return true
	}

	return false
}

// SetExpiringPoints gets a reference to the given []LoyaltyLedgerEntry and assigns it to the ExpiringPoints field.
func (o *LoyaltySubLedger) SetExpiringPoints(v []LoyaltyLedgerEntry) {
	o.ExpiringPoints = &v
}

type NullableLoyaltySubLedger struct {
	Value        LoyaltySubLedger
	ExplicitNull bool
}

func (v NullableLoyaltySubLedger) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableLoyaltySubLedger) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
