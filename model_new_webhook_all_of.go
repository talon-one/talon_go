/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// NewWebhookAllOf struct for NewWebhookAllOf
type NewWebhookAllOf struct {
	// Name or title for this webhook.
	Title string `json:"title"`
	// API method for this webhook.
	Verb string `json:"verb"`
	// API URL (supports templating using parameters) for this webhook.
	Url string `json:"url"`
	// List of API HTTP headers for this webhook.
	Headers []string `json:"headers"`
	// API payload (supports templating using parameters) for this webhook.
	Payload *string `json:"payload,omitempty"`
	// Array of template argument definitions.
	Params []TemplateArgDef `json:"params"`
	// Enables or disables webhook from showing in the Rule Builder.
	Enabled bool `json:"enabled"`
}

// GetTitle returns the Title field value
func (o *NewWebhookAllOf) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// SetTitle sets field value
func (o *NewWebhookAllOf) SetTitle(v string) {
	o.Title = v
}

// GetVerb returns the Verb field value
func (o *NewWebhookAllOf) GetVerb() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Verb
}

// SetVerb sets field value
func (o *NewWebhookAllOf) SetVerb(v string) {
	o.Verb = v
}

// GetUrl returns the Url field value
func (o *NewWebhookAllOf) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// SetUrl sets field value
func (o *NewWebhookAllOf) SetUrl(v string) {
	o.Url = v
}

// GetHeaders returns the Headers field value
func (o *NewWebhookAllOf) GetHeaders() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Headers
}

// SetHeaders sets field value
func (o *NewWebhookAllOf) SetHeaders(v []string) {
	o.Headers = v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *NewWebhookAllOf) GetPayload() string {
	if o == nil || o.Payload == nil {
		var ret string
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewWebhookAllOf) GetPayloadOk() (string, bool) {
	if o == nil || o.Payload == nil {
		var ret string
		return ret, false
	}
	return *o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *NewWebhookAllOf) HasPayload() bool {
	if o != nil && o.Payload != nil {
		return true
	}

	return false
}

// SetPayload gets a reference to the given string and assigns it to the Payload field.
func (o *NewWebhookAllOf) SetPayload(v string) {
	o.Payload = &v
}

// GetParams returns the Params field value
func (o *NewWebhookAllOf) GetParams() []TemplateArgDef {
	if o == nil {
		var ret []TemplateArgDef
		return ret
	}

	return o.Params
}

// SetParams sets field value
func (o *NewWebhookAllOf) SetParams(v []TemplateArgDef) {
	o.Params = v
}

// GetEnabled returns the Enabled field value
func (o *NewWebhookAllOf) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// SetEnabled sets field value
func (o *NewWebhookAllOf) SetEnabled(v bool) {
	o.Enabled = v
}

type NullableNewWebhookAllOf struct {
	Value NewWebhookAllOf
	ExplicitNull bool
}

func (v NullableNewWebhookAllOf) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableNewWebhookAllOf) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
