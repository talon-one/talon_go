/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// ApplicationEventAllOf struct for ApplicationEventAllOf
type ApplicationEventAllOf struct {
	// The globally unique Talon.One ID of the session that contains this event.
	SessionId *int32 `json:"sessionId,omitempty"`
	// A string representing the event. Must not be a reserved event name.
	Type string `json:"type"`
	// Additional JSON serialized data associated with the event.
	Attributes map[string]map[string]interface{} `json:"attributes"`
	// An array containing the effects that were applied as a result of this event.
	Effects []Effect `json:"effects"`
	// An array containing the rule failure reasons which happened during this event.
	RuleFailureReasons *[]RuleFailureReason `json:"ruleFailureReasons,omitempty"`
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *ApplicationEventAllOf) GetSessionId() int32 {
	if o == nil || o.SessionId == nil {
		var ret int32
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationEventAllOf) GetSessionIdOk() (int32, bool) {
	if o == nil || o.SessionId == nil {
		var ret int32
		return ret, false
	}
	return *o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *ApplicationEventAllOf) HasSessionId() bool {
	if o != nil && o.SessionId != nil {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given int32 and assigns it to the SessionId field.
func (o *ApplicationEventAllOf) SetSessionId(v int32) {
	o.SessionId = &v
}

// GetType returns the Type field value
func (o *ApplicationEventAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// SetType sets field value
func (o *ApplicationEventAllOf) SetType(v string) {
	o.Type = v
}

// GetAttributes returns the Attributes field value
func (o *ApplicationEventAllOf) GetAttributes() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Attributes
}

// SetAttributes sets field value
func (o *ApplicationEventAllOf) SetAttributes(v map[string]map[string]interface{}) {
	o.Attributes = v
}

// GetEffects returns the Effects field value
func (o *ApplicationEventAllOf) GetEffects() []Effect {
	if o == nil {
		var ret []Effect
		return ret
	}

	return o.Effects
}

// SetEffects sets field value
func (o *ApplicationEventAllOf) SetEffects(v []Effect) {
	o.Effects = v
}

// GetRuleFailureReasons returns the RuleFailureReasons field value if set, zero value otherwise.
func (o *ApplicationEventAllOf) GetRuleFailureReasons() []RuleFailureReason {
	if o == nil || o.RuleFailureReasons == nil {
		var ret []RuleFailureReason
		return ret
	}
	return *o.RuleFailureReasons
}

// GetRuleFailureReasonsOk returns a tuple with the RuleFailureReasons field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationEventAllOf) GetRuleFailureReasonsOk() ([]RuleFailureReason, bool) {
	if o == nil || o.RuleFailureReasons == nil {
		var ret []RuleFailureReason
		return ret, false
	}
	return *o.RuleFailureReasons, true
}

// HasRuleFailureReasons returns a boolean if a field has been set.
func (o *ApplicationEventAllOf) HasRuleFailureReasons() bool {
	if o != nil && o.RuleFailureReasons != nil {
		return true
	}

	return false
}

// SetRuleFailureReasons gets a reference to the given []RuleFailureReason and assigns it to the RuleFailureReasons field.
func (o *ApplicationEventAllOf) SetRuleFailureReasons(v []RuleFailureReason) {
	o.RuleFailureReasons = &v
}

type NullableApplicationEventAllOf struct {
	Value ApplicationEventAllOf
	ExplicitNull bool
}

func (v NullableApplicationEventAllOf) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableApplicationEventAllOf) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
