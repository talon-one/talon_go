/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}`
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// LoyaltyProjection Group of all loyalty points expected in the future.
type LoyaltyProjection struct {
	Projections *[]LoyaltyProjectionData `json:"projections,omitempty"`
	// Sum of points to be expired by the projection date set in the query parameter.
	TotalExpiringPoints float32 `json:"totalExpiringPoints"`
	// Sum of points to be active by the projection date set in the query parameter.
	TotalActivatingPoints float32 `json:"totalActivatingPoints"`
}

// GetProjections returns the Projections field value if set, zero value otherwise.
func (o *LoyaltyProjection) GetProjections() []LoyaltyProjectionData {
	if o == nil || o.Projections == nil {
		var ret []LoyaltyProjectionData
		return ret
	}
	return *o.Projections
}

// GetProjectionsOk returns a tuple with the Projections field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyProjection) GetProjectionsOk() ([]LoyaltyProjectionData, bool) {
	if o == nil || o.Projections == nil {
		var ret []LoyaltyProjectionData
		return ret, false
	}
	return *o.Projections, true
}

// HasProjections returns a boolean if a field has been set.
func (o *LoyaltyProjection) HasProjections() bool {
	if o != nil && o.Projections != nil {
		return true
	}

	return false
}

// SetProjections gets a reference to the given []LoyaltyProjectionData and assigns it to the Projections field.
func (o *LoyaltyProjection) SetProjections(v []LoyaltyProjectionData) {
	o.Projections = &v
}

// GetTotalExpiringPoints returns the TotalExpiringPoints field value
func (o *LoyaltyProjection) GetTotalExpiringPoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalExpiringPoints
}

// SetTotalExpiringPoints sets field value
func (o *LoyaltyProjection) SetTotalExpiringPoints(v float32) {
	o.TotalExpiringPoints = v
}

// GetTotalActivatingPoints returns the TotalActivatingPoints field value
func (o *LoyaltyProjection) GetTotalActivatingPoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalActivatingPoints
}

// SetTotalActivatingPoints sets field value
func (o *LoyaltyProjection) SetTotalActivatingPoints(v float32) {
	o.TotalActivatingPoints = v
}

type NullableLoyaltyProjection struct {
	Value        LoyaltyProjection
	ExplicitNull bool
}

func (v NullableLoyaltyProjection) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableLoyaltyProjection) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
