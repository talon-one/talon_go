/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * API version:
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
	"time"
)

// ExtendLoyaltyPointsExpiryDateEffectProps The properties specific to the \"extendLoyaltyPointsExpiryDate\" effect. This gets triggered when a validated rule contains the \"extend expiry date\" effect. The current expiry date gets extended by the time frame given in the effect.
type ExtendLoyaltyPointsExpiryDateEffectProps struct {
	// ID of the loyalty program that contains these points.
	ProgramId int32 `json:"programId"`
	// API name of the loyalty program subledger that contains these points. added.
	SubLedgerId string `json:"subLedgerId"`
	// Time frame by which the expiry date extends.  The time format is either: - immediate, or - an **integer** followed by a letter indicating the time unit.  Examples: `immediate`, `30s`, `40m`, `1h`, `5D`, `7W`, `10M`, `15Y`.  Available units:  - `s`: seconds - `m`: minutes - `h`: hours - `D`: days - `W`: weeks - `M`: months - `Y`: years  You can round certain units up or down: - `_D` for rounding down days only. Signifies the start of the day. - `_U` for rounding up days, weeks, months and years. Signifies the end of the day, week, month or year.
	ExtensionDuration string `json:"extensionDuration"`
	// The list of identifiers of transactions affected affected by the extension.
	TransactionUUIDs *[]string `json:"transactionUUIDs,omitempty"`
	// Expiry date before applying the extension.
	PreviousExpirationDate time.Time `json:"previousExpirationDate"`
}

// GetProgramId returns the ProgramId field value
func (o *ExtendLoyaltyPointsExpiryDateEffectProps) GetProgramId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProgramId
}

// SetProgramId sets field value
func (o *ExtendLoyaltyPointsExpiryDateEffectProps) SetProgramId(v int32) {
	o.ProgramId = v
}

// GetSubLedgerId returns the SubLedgerId field value
func (o *ExtendLoyaltyPointsExpiryDateEffectProps) GetSubLedgerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubLedgerId
}

// SetSubLedgerId sets field value
func (o *ExtendLoyaltyPointsExpiryDateEffectProps) SetSubLedgerId(v string) {
	o.SubLedgerId = v
}

// GetExtensionDuration returns the ExtensionDuration field value
func (o *ExtendLoyaltyPointsExpiryDateEffectProps) GetExtensionDuration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExtensionDuration
}

// SetExtensionDuration sets field value
func (o *ExtendLoyaltyPointsExpiryDateEffectProps) SetExtensionDuration(v string) {
	o.ExtensionDuration = v
}

// GetTransactionUUIDs returns the TransactionUUIDs field value if set, zero value otherwise.
func (o *ExtendLoyaltyPointsExpiryDateEffectProps) GetTransactionUUIDs() []string {
	if o == nil || o.TransactionUUIDs == nil {
		var ret []string
		return ret
	}
	return *o.TransactionUUIDs
}

// GetTransactionUUIDsOk returns a tuple with the TransactionUUIDs field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ExtendLoyaltyPointsExpiryDateEffectProps) GetTransactionUUIDsOk() ([]string, bool) {
	if o == nil || o.TransactionUUIDs == nil {
		var ret []string
		return ret, false
	}
	return *o.TransactionUUIDs, true
}

// HasTransactionUUIDs returns a boolean if a field has been set.
func (o *ExtendLoyaltyPointsExpiryDateEffectProps) HasTransactionUUIDs() bool {
	if o != nil && o.TransactionUUIDs != nil {
		return true
	}

	return false
}

// SetTransactionUUIDs gets a reference to the given []string and assigns it to the TransactionUUIDs field.
func (o *ExtendLoyaltyPointsExpiryDateEffectProps) SetTransactionUUIDs(v []string) {
	o.TransactionUUIDs = &v
}

// GetPreviousExpirationDate returns the PreviousExpirationDate field value
func (o *ExtendLoyaltyPointsExpiryDateEffectProps) GetPreviousExpirationDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.PreviousExpirationDate
}

// SetPreviousExpirationDate sets field value
func (o *ExtendLoyaltyPointsExpiryDateEffectProps) SetPreviousExpirationDate(v time.Time) {
	o.PreviousExpirationDate = v
}

type NullableExtendLoyaltyPointsExpiryDateEffectProps struct {
	Value        ExtendLoyaltyPointsExpiryDateEffectProps
	ExplicitNull bool
}

func (v NullableExtendLoyaltyPointsExpiryDateEffectProps) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableExtendLoyaltyPointsExpiryDateEffectProps) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
