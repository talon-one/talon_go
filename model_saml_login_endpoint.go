/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}`
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// SamlLoginEndpoint struct for SamlLoginEndpoint
type SamlLoginEndpoint struct {
	// ID of the SAML service.
	Name string `json:"name"`
	// Single Sign-On URL.
	LoginURL string `json:"loginURL"`
}

// GetName returns the Name field value
func (o *SamlLoginEndpoint) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// SetName sets field value
func (o *SamlLoginEndpoint) SetName(v string) {
	o.Name = v
}

// GetLoginURL returns the LoginURL field value
func (o *SamlLoginEndpoint) GetLoginURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LoginURL
}

// SetLoginURL sets field value
func (o *SamlLoginEndpoint) SetLoginURL(v string) {
	o.LoginURL = v
}

type NullableSamlLoginEndpoint struct {
	Value        SamlLoginEndpoint
	ExplicitNull bool
}

func (v NullableSamlLoginEndpoint) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableSamlLoginEndpoint) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
