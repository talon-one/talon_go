/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}`
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// BaseSamlConnection struct for BaseSamlConnection
type BaseSamlConnection struct {
	// The ID of the account that owns this entity.
	AccountId int32 `json:"accountId"`
	// ID of the SAML service.
	Name string `json:"name"`
	// Determines if this SAML connection active.
	Enabled bool `json:"enabled"`
	// Identity Provider Entity ID.
	Issuer string `json:"issuer"`
	// Single Sign-On URL.
	SignOnURL string `json:"signOnURL"`
	// Single Sign-Out URL.
	SignOutURL *string `json:"signOutURL,omitempty"`
	// Metadata URL.
	MetadataURL *string `json:"metadataURL,omitempty"`
	// The application-defined unique identifier that is the intended audience of the SAML assertion. This is most often the SP Entity ID of your application. When not specified, the ACS URL will be used.
	AudienceURI *string `json:"audienceURI,omitempty"`
}

// GetAccountId returns the AccountId field value
func (o *BaseSamlConnection) GetAccountId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountId
}

// SetAccountId sets field value
func (o *BaseSamlConnection) SetAccountId(v int32) {
	o.AccountId = v
}

// GetName returns the Name field value
func (o *BaseSamlConnection) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// SetName sets field value
func (o *BaseSamlConnection) SetName(v string) {
	o.Name = v
}

// GetEnabled returns the Enabled field value
func (o *BaseSamlConnection) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// SetEnabled sets field value
func (o *BaseSamlConnection) SetEnabled(v bool) {
	o.Enabled = v
}

// GetIssuer returns the Issuer field value
func (o *BaseSamlConnection) GetIssuer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Issuer
}

// SetIssuer sets field value
func (o *BaseSamlConnection) SetIssuer(v string) {
	o.Issuer = v
}

// GetSignOnURL returns the SignOnURL field value
func (o *BaseSamlConnection) GetSignOnURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignOnURL
}

// SetSignOnURL sets field value
func (o *BaseSamlConnection) SetSignOnURL(v string) {
	o.SignOnURL = v
}

// GetSignOutURL returns the SignOutURL field value if set, zero value otherwise.
func (o *BaseSamlConnection) GetSignOutURL() string {
	if o == nil || o.SignOutURL == nil {
		var ret string
		return ret
	}
	return *o.SignOutURL
}

// GetSignOutURLOk returns a tuple with the SignOutURL field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *BaseSamlConnection) GetSignOutURLOk() (string, bool) {
	if o == nil || o.SignOutURL == nil {
		var ret string
		return ret, false
	}
	return *o.SignOutURL, true
}

// HasSignOutURL returns a boolean if a field has been set.
func (o *BaseSamlConnection) HasSignOutURL() bool {
	if o != nil && o.SignOutURL != nil {
		return true
	}

	return false
}

// SetSignOutURL gets a reference to the given string and assigns it to the SignOutURL field.
func (o *BaseSamlConnection) SetSignOutURL(v string) {
	o.SignOutURL = &v
}

// GetMetadataURL returns the MetadataURL field value if set, zero value otherwise.
func (o *BaseSamlConnection) GetMetadataURL() string {
	if o == nil || o.MetadataURL == nil {
		var ret string
		return ret
	}
	return *o.MetadataURL
}

// GetMetadataURLOk returns a tuple with the MetadataURL field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *BaseSamlConnection) GetMetadataURLOk() (string, bool) {
	if o == nil || o.MetadataURL == nil {
		var ret string
		return ret, false
	}
	return *o.MetadataURL, true
}

// HasMetadataURL returns a boolean if a field has been set.
func (o *BaseSamlConnection) HasMetadataURL() bool {
	if o != nil && o.MetadataURL != nil {
		return true
	}

	return false
}

// SetMetadataURL gets a reference to the given string and assigns it to the MetadataURL field.
func (o *BaseSamlConnection) SetMetadataURL(v string) {
	o.MetadataURL = &v
}

// GetAudienceURI returns the AudienceURI field value if set, zero value otherwise.
func (o *BaseSamlConnection) GetAudienceURI() string {
	if o == nil || o.AudienceURI == nil {
		var ret string
		return ret
	}
	return *o.AudienceURI
}

// GetAudienceURIOk returns a tuple with the AudienceURI field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *BaseSamlConnection) GetAudienceURIOk() (string, bool) {
	if o == nil || o.AudienceURI == nil {
		var ret string
		return ret, false
	}
	return *o.AudienceURI, true
}

// HasAudienceURI returns a boolean if a field has been set.
func (o *BaseSamlConnection) HasAudienceURI() bool {
	if o != nil && o.AudienceURI != nil {
		return true
	}

	return false
}

// SetAudienceURI gets a reference to the given string and assigns it to the AudienceURI field.
func (o *BaseSamlConnection) SetAudienceURI(v string) {
	o.AudienceURI = &v
}

type NullableBaseSamlConnection struct {
	Value        BaseSamlConnection
	ExplicitNull bool
}

func (v NullableBaseSamlConnection) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableBaseSamlConnection) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
