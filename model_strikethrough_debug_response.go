/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * API version:
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// StrikethroughDebugResponse struct for StrikethroughDebugResponse
type StrikethroughDebugResponse struct {
	// The campaign IDs that got fetched for the evaluation process.
	CampaignsIDs *[]int32 `json:"campaignsIDs,omitempty"`
	// The strikethrough effects that are returned from the evaluation process.
	Effects *[]StrikethroughEffect `json:"effects,omitempty"`
}

// GetCampaignsIDs returns the CampaignsIDs field value if set, zero value otherwise.
func (o *StrikethroughDebugResponse) GetCampaignsIDs() []int32 {
	if o == nil || o.CampaignsIDs == nil {
		var ret []int32
		return ret
	}
	return *o.CampaignsIDs
}

// GetCampaignsIDsOk returns a tuple with the CampaignsIDs field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *StrikethroughDebugResponse) GetCampaignsIDsOk() ([]int32, bool) {
	if o == nil || o.CampaignsIDs == nil {
		var ret []int32
		return ret, false
	}
	return *o.CampaignsIDs, true
}

// HasCampaignsIDs returns a boolean if a field has been set.
func (o *StrikethroughDebugResponse) HasCampaignsIDs() bool {
	if o != nil && o.CampaignsIDs != nil {
		return true
	}

	return false
}

// SetCampaignsIDs gets a reference to the given []int32 and assigns it to the CampaignsIDs field.
func (o *StrikethroughDebugResponse) SetCampaignsIDs(v []int32) {
	o.CampaignsIDs = &v
}

// GetEffects returns the Effects field value if set, zero value otherwise.
func (o *StrikethroughDebugResponse) GetEffects() []StrikethroughEffect {
	if o == nil || o.Effects == nil {
		var ret []StrikethroughEffect
		return ret
	}
	return *o.Effects
}

// GetEffectsOk returns a tuple with the Effects field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *StrikethroughDebugResponse) GetEffectsOk() ([]StrikethroughEffect, bool) {
	if o == nil || o.Effects == nil {
		var ret []StrikethroughEffect
		return ret, false
	}
	return *o.Effects, true
}

// HasEffects returns a boolean if a field has been set.
func (o *StrikethroughDebugResponse) HasEffects() bool {
	if o != nil && o.Effects != nil {
		return true
	}

	return false
}

// SetEffects gets a reference to the given []StrikethroughEffect and assigns it to the Effects field.
func (o *StrikethroughDebugResponse) SetEffects(v []StrikethroughEffect) {
	o.Effects = &v
}

type NullableStrikethroughDebugResponse struct {
	Value        StrikethroughDebugResponse
	ExplicitNull bool
}

func (v NullableStrikethroughDebugResponse) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableStrikethroughDebugResponse) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
