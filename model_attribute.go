/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * API version:
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
	"time"
)

// Attribute
type Attribute struct {
	// Internal ID of this entity.
	Id int32 `json:"id"`
	// The time this entity was created.
	Created time.Time `json:"created"`
	// The ID of the account that owns this entity.
	AccountId int32 `json:"accountId"`
	// The name of the entity that can have this attribute. When creating or updating the entities of a given type, you can include an `attributes` object with keys corresponding to the `name` of the custom attributes for that type.
	Entity    string  `json:"entity"`
	EventType *string `json:"eventType,omitempty"`
	// The attribute name that will be used in API requests and Talang. E.g. if `name == \"region\"` then you would set the region attribute by including an `attributes.region` property in your request payload.
	Name string `json:"name"`
	// The human-readable name for the attribute that will be shown in the Campaign Manager. Like `name`, the combination of entity and title must also be unique.
	Title string `json:"title"`
	// The data type of the attribute, a `time` attribute must be sent as a string that conforms to the [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) timestamp format.
	Type string `json:"type"`
	// A description of this attribute.
	Description string `json:"description"`
	// A list of suggestions for the attribute.
	Suggestions []string `json:"suggestions"`
	// Whether or not this attribute has an allowed list of values associated with it.
	HasAllowedList *bool `json:"hasAllowedList,omitempty"`
	// Whether or not this attribute's value is restricted by suggestions (`suggestions` property) or by an allowed list of value (`hasAllowedList` property).
	RestrictedBySuggestions *bool `json:"restrictedBySuggestions,omitempty"`
	// Whether or not this attribute can be edited.
	Editable bool `json:"editable"`
	// A list of the IDs of the applications where this attribute is available.
	SubscribedApplicationsIds *[]int32 `json:"subscribedApplicationsIds,omitempty"`
	// A list of the IDs of the catalogs where this attribute is available.
	SubscribedCatalogsIds *[]int32 `json:"subscribedCatalogsIds,omitempty"`
	// A list of allowed subscription types for this attribute.  **Note:** This only applies to attributes associated with the `CartItem` entity.
	AllowedSubscriptions *[]string `json:"allowedSubscriptions,omitempty"`
	EventTypeId          *int32    `json:"eventTypeId,omitempty"`
}

// GetId returns the Id field value
func (o *Attribute) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// SetId sets field value
func (o *Attribute) SetId(v int32) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *Attribute) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// SetCreated sets field value
func (o *Attribute) SetCreated(v time.Time) {
	o.Created = v
}

// GetAccountId returns the AccountId field value
func (o *Attribute) GetAccountId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountId
}

// SetAccountId sets field value
func (o *Attribute) SetAccountId(v int32) {
	o.AccountId = v
}

// GetEntity returns the Entity field value
func (o *Attribute) GetEntity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Entity
}

// SetEntity sets field value
func (o *Attribute) SetEntity(v string) {
	o.Entity = v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *Attribute) GetEventType() string {
	if o == nil || o.EventType == nil {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Attribute) GetEventTypeOk() (string, bool) {
	if o == nil || o.EventType == nil {
		var ret string
		return ret, false
	}
	return *o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *Attribute) HasEventType() bool {
	if o != nil && o.EventType != nil {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *Attribute) SetEventType(v string) {
	o.EventType = &v
}

// GetName returns the Name field value
func (o *Attribute) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// SetName sets field value
func (o *Attribute) SetName(v string) {
	o.Name = v
}

// GetTitle returns the Title field value
func (o *Attribute) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// SetTitle sets field value
func (o *Attribute) SetTitle(v string) {
	o.Title = v
}

// GetType returns the Type field value
func (o *Attribute) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// SetType sets field value
func (o *Attribute) SetType(v string) {
	o.Type = v
}

// GetDescription returns the Description field value
func (o *Attribute) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// SetDescription sets field value
func (o *Attribute) SetDescription(v string) {
	o.Description = v
}

// GetSuggestions returns the Suggestions field value
func (o *Attribute) GetSuggestions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Suggestions
}

// SetSuggestions sets field value
func (o *Attribute) SetSuggestions(v []string) {
	o.Suggestions = v
}

// GetHasAllowedList returns the HasAllowedList field value if set, zero value otherwise.
func (o *Attribute) GetHasAllowedList() bool {
	if o == nil || o.HasAllowedList == nil {
		var ret bool
		return ret
	}
	return *o.HasAllowedList
}

// GetHasAllowedListOk returns a tuple with the HasAllowedList field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Attribute) GetHasAllowedListOk() (bool, bool) {
	if o == nil || o.HasAllowedList == nil {
		var ret bool
		return ret, false
	}
	return *o.HasAllowedList, true
}

// HasHasAllowedList returns a boolean if a field has been set.
func (o *Attribute) HasHasAllowedList() bool {
	if o != nil && o.HasAllowedList != nil {
		return true
	}

	return false
}

// SetHasAllowedList gets a reference to the given bool and assigns it to the HasAllowedList field.
func (o *Attribute) SetHasAllowedList(v bool) {
	o.HasAllowedList = &v
}

// GetRestrictedBySuggestions returns the RestrictedBySuggestions field value if set, zero value otherwise.
func (o *Attribute) GetRestrictedBySuggestions() bool {
	if o == nil || o.RestrictedBySuggestions == nil {
		var ret bool
		return ret
	}
	return *o.RestrictedBySuggestions
}

// GetRestrictedBySuggestionsOk returns a tuple with the RestrictedBySuggestions field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Attribute) GetRestrictedBySuggestionsOk() (bool, bool) {
	if o == nil || o.RestrictedBySuggestions == nil {
		var ret bool
		return ret, false
	}
	return *o.RestrictedBySuggestions, true
}

// HasRestrictedBySuggestions returns a boolean if a field has been set.
func (o *Attribute) HasRestrictedBySuggestions() bool {
	if o != nil && o.RestrictedBySuggestions != nil {
		return true
	}

	return false
}

// SetRestrictedBySuggestions gets a reference to the given bool and assigns it to the RestrictedBySuggestions field.
func (o *Attribute) SetRestrictedBySuggestions(v bool) {
	o.RestrictedBySuggestions = &v
}

// GetEditable returns the Editable field value
func (o *Attribute) GetEditable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Editable
}

// SetEditable sets field value
func (o *Attribute) SetEditable(v bool) {
	o.Editable = v
}

// GetSubscribedApplicationsIds returns the SubscribedApplicationsIds field value if set, zero value otherwise.
func (o *Attribute) GetSubscribedApplicationsIds() []int32 {
	if o == nil || o.SubscribedApplicationsIds == nil {
		var ret []int32
		return ret
	}
	return *o.SubscribedApplicationsIds
}

// GetSubscribedApplicationsIdsOk returns a tuple with the SubscribedApplicationsIds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Attribute) GetSubscribedApplicationsIdsOk() ([]int32, bool) {
	if o == nil || o.SubscribedApplicationsIds == nil {
		var ret []int32
		return ret, false
	}
	return *o.SubscribedApplicationsIds, true
}

// HasSubscribedApplicationsIds returns a boolean if a field has been set.
func (o *Attribute) HasSubscribedApplicationsIds() bool {
	if o != nil && o.SubscribedApplicationsIds != nil {
		return true
	}

	return false
}

// SetSubscribedApplicationsIds gets a reference to the given []int32 and assigns it to the SubscribedApplicationsIds field.
func (o *Attribute) SetSubscribedApplicationsIds(v []int32) {
	o.SubscribedApplicationsIds = &v
}

// GetSubscribedCatalogsIds returns the SubscribedCatalogsIds field value if set, zero value otherwise.
func (o *Attribute) GetSubscribedCatalogsIds() []int32 {
	if o == nil || o.SubscribedCatalogsIds == nil {
		var ret []int32
		return ret
	}
	return *o.SubscribedCatalogsIds
}

// GetSubscribedCatalogsIdsOk returns a tuple with the SubscribedCatalogsIds field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Attribute) GetSubscribedCatalogsIdsOk() ([]int32, bool) {
	if o == nil || o.SubscribedCatalogsIds == nil {
		var ret []int32
		return ret, false
	}
	return *o.SubscribedCatalogsIds, true
}

// HasSubscribedCatalogsIds returns a boolean if a field has been set.
func (o *Attribute) HasSubscribedCatalogsIds() bool {
	if o != nil && o.SubscribedCatalogsIds != nil {
		return true
	}

	return false
}

// SetSubscribedCatalogsIds gets a reference to the given []int32 and assigns it to the SubscribedCatalogsIds field.
func (o *Attribute) SetSubscribedCatalogsIds(v []int32) {
	o.SubscribedCatalogsIds = &v
}

// GetAllowedSubscriptions returns the AllowedSubscriptions field value if set, zero value otherwise.
func (o *Attribute) GetAllowedSubscriptions() []string {
	if o == nil || o.AllowedSubscriptions == nil {
		var ret []string
		return ret
	}
	return *o.AllowedSubscriptions
}

// GetAllowedSubscriptionsOk returns a tuple with the AllowedSubscriptions field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Attribute) GetAllowedSubscriptionsOk() ([]string, bool) {
	if o == nil || o.AllowedSubscriptions == nil {
		var ret []string
		return ret, false
	}
	return *o.AllowedSubscriptions, true
}

// HasAllowedSubscriptions returns a boolean if a field has been set.
func (o *Attribute) HasAllowedSubscriptions() bool {
	if o != nil && o.AllowedSubscriptions != nil {
		return true
	}

	return false
}

// SetAllowedSubscriptions gets a reference to the given []string and assigns it to the AllowedSubscriptions field.
func (o *Attribute) SetAllowedSubscriptions(v []string) {
	o.AllowedSubscriptions = &v
}

// GetEventTypeId returns the EventTypeId field value if set, zero value otherwise.
func (o *Attribute) GetEventTypeId() int32 {
	if o == nil || o.EventTypeId == nil {
		var ret int32
		return ret
	}
	return *o.EventTypeId
}

// GetEventTypeIdOk returns a tuple with the EventTypeId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Attribute) GetEventTypeIdOk() (int32, bool) {
	if o == nil || o.EventTypeId == nil {
		var ret int32
		return ret, false
	}
	return *o.EventTypeId, true
}

// HasEventTypeId returns a boolean if a field has been set.
func (o *Attribute) HasEventTypeId() bool {
	if o != nil && o.EventTypeId != nil {
		return true
	}

	return false
}

// SetEventTypeId gets a reference to the given int32 and assigns it to the EventTypeId field.
func (o *Attribute) SetEventTypeId(v int32) {
	o.EventTypeId = &v
}

type NullableAttribute struct {
	Value        Attribute
	ExplicitNull bool
}

func (v NullableAttribute) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableAttribute) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
