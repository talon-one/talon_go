/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * API version:
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// NewApplicationCifExpression struct for NewApplicationCifExpression
type NewApplicationCifExpression struct {
	// The ID of the Application cart item filter.
	CartItemFilterId *int32 `json:"cartItemFilterId,omitempty"`
	// The ID of the user who created the Application cart item filter.
	CreatedBy *int32 `json:"createdBy,omitempty"`
	// Arbitrary additional JSON data associated with the Application cart item filter.
	Expression []interface{} `json:"expression,omitempty"`
}

// GetCartItemFilterId returns the CartItemFilterId field value if set, zero value otherwise.
func (o *NewApplicationCifExpression) GetCartItemFilterId() int32 {
	if o == nil || o.CartItemFilterId == nil {
		var ret int32
		return ret
	}
	return *o.CartItemFilterId
}

// GetCartItemFilterIdOk returns a tuple with the CartItemFilterId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewApplicationCifExpression) GetCartItemFilterIdOk() (int32, bool) {
	if o == nil || o.CartItemFilterId == nil {
		var ret int32
		return ret, false
	}
	return *o.CartItemFilterId, true
}

// HasCartItemFilterId returns a boolean if a field has been set.
func (o *NewApplicationCifExpression) HasCartItemFilterId() bool {
	if o != nil && o.CartItemFilterId != nil {
		return true
	}

	return false
}

// SetCartItemFilterId gets a reference to the given int32 and assigns it to the CartItemFilterId field.
func (o *NewApplicationCifExpression) SetCartItemFilterId(v int32) {
	o.CartItemFilterId = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *NewApplicationCifExpression) GetCreatedBy() int32 {
	if o == nil || o.CreatedBy == nil {
		var ret int32
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewApplicationCifExpression) GetCreatedByOk() (int32, bool) {
	if o == nil || o.CreatedBy == nil {
		var ret int32
		return ret, false
	}
	return *o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *NewApplicationCifExpression) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given int32 and assigns it to the CreatedBy field.
func (o *NewApplicationCifExpression) SetCreatedBy(v int32) {
	o.CreatedBy = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *NewApplicationCifExpression) GetExpression() []interface{} {
	if o == nil || o.Expression == nil {
		var ret []interface{}
		return ret
	}
	return o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewApplicationCifExpression) GetExpressionOk() ([]interface{}, bool) {
	if o == nil || o.Expression == nil {
		var ret []interface{}
		return ret, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *NewApplicationCifExpression) HasExpression() bool {
	if o != nil && o.Expression != nil {
		return true
	}

	return false
}

// SetExpression gets a reference to the given []interface{} and assigns it to the Expression field.
func (o *NewApplicationCifExpression) SetExpression(v []interface{}) {
	o.Expression = v
}

type NullableNewApplicationCifExpression struct {
	Value        NewApplicationCifExpression
	ExplicitNull bool
}

func (v NullableNewApplicationCifExpression) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableNewApplicationCifExpression) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
