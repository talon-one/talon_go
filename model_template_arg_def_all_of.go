/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// TemplateArgDefAllOf struct for TemplateArgDefAllOf
type TemplateArgDefAllOf struct {
	// A campaigner friendly name for the argument, this will be shown in the rule editor.
	Title string `json:"title"`
	// Arbitrary metadata that may be used to render an input for this argument.
	Ui map[string]map[string]interface{} `json:"ui"`
	// ID of the picklist linked to a template.
	PicklistID *int32 `json:"picklistID,omitempty"`
	// Whether or not this attribute's value is restricted by picklist (`picklist` property)
	RestrictedByPicklist *bool `json:"restrictedByPicklist,omitempty"`
}

// GetTitle returns the Title field value
func (o *TemplateArgDefAllOf) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// SetTitle sets field value
func (o *TemplateArgDefAllOf) SetTitle(v string) {
	o.Title = v
}

// GetUi returns the Ui field value
func (o *TemplateArgDefAllOf) GetUi() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Ui
}

// SetUi sets field value
func (o *TemplateArgDefAllOf) SetUi(v map[string]map[string]interface{}) {
	o.Ui = v
}

// GetPicklistID returns the PicklistID field value if set, zero value otherwise.
func (o *TemplateArgDefAllOf) GetPicklistID() int32 {
	if o == nil || o.PicklistID == nil {
		var ret int32
		return ret
	}
	return *o.PicklistID
}

// GetPicklistIDOk returns a tuple with the PicklistID field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TemplateArgDefAllOf) GetPicklistIDOk() (int32, bool) {
	if o == nil || o.PicklistID == nil {
		var ret int32
		return ret, false
	}
	return *o.PicklistID, true
}

// HasPicklistID returns a boolean if a field has been set.
func (o *TemplateArgDefAllOf) HasPicklistID() bool {
	if o != nil && o.PicklistID != nil {
		return true
	}

	return false
}

// SetPicklistID gets a reference to the given int32 and assigns it to the PicklistID field.
func (o *TemplateArgDefAllOf) SetPicklistID(v int32) {
	o.PicklistID = &v
}

// GetRestrictedByPicklist returns the RestrictedByPicklist field value if set, zero value otherwise.
func (o *TemplateArgDefAllOf) GetRestrictedByPicklist() bool {
	if o == nil || o.RestrictedByPicklist == nil {
		var ret bool
		return ret
	}
	return *o.RestrictedByPicklist
}

// GetRestrictedByPicklistOk returns a tuple with the RestrictedByPicklist field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TemplateArgDefAllOf) GetRestrictedByPicklistOk() (bool, bool) {
	if o == nil || o.RestrictedByPicklist == nil {
		var ret bool
		return ret, false
	}
	return *o.RestrictedByPicklist, true
}

// HasRestrictedByPicklist returns a boolean if a field has been set.
func (o *TemplateArgDefAllOf) HasRestrictedByPicklist() bool {
	if o != nil && o.RestrictedByPicklist != nil {
		return true
	}

	return false
}

// SetRestrictedByPicklist gets a reference to the given bool and assigns it to the RestrictedByPicklist field.
func (o *TemplateArgDefAllOf) SetRestrictedByPicklist(v bool) {
	o.RestrictedByPicklist = &v
}

type NullableTemplateArgDefAllOf struct {
	Value TemplateArgDefAllOf
	ExplicitNull bool
}

func (v NullableTemplateArgDefAllOf) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableTemplateArgDefAllOf) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
