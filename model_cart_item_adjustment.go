/*
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// CartItemAdjustment struct for CartItemAdjustment
type CartItemAdjustment struct {
	// Loyalty Program to be used for payment
	PayFromLoyaltyProgram int32 `json:"payFromLoyaltyProgram"`
	// Amount of points to be spend
	PointPayment int32 `json:"pointPayment"`
	// Remaining price in currency after payment in points has been made
	RemainingPrice *float32 `json:"remainingPrice,omitempty"`
}

// GetPayFromLoyaltyProgram returns the PayFromLoyaltyProgram field value
func (o *CartItemAdjustment) GetPayFromLoyaltyProgram() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PayFromLoyaltyProgram
}

// SetPayFromLoyaltyProgram sets field value
func (o *CartItemAdjustment) SetPayFromLoyaltyProgram(v int32) {
	o.PayFromLoyaltyProgram = v
}

// GetPointPayment returns the PointPayment field value
func (o *CartItemAdjustment) GetPointPayment() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PointPayment
}

// SetPointPayment sets field value
func (o *CartItemAdjustment) SetPointPayment(v int32) {
	o.PointPayment = v
}

// GetRemainingPrice returns the RemainingPrice field value if set, zero value otherwise.
func (o *CartItemAdjustment) GetRemainingPrice() float32 {
	if o == nil || o.RemainingPrice == nil {
		var ret float32
		return ret
	}
	return *o.RemainingPrice
}

// GetRemainingPriceOk returns a tuple with the RemainingPrice field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CartItemAdjustment) GetRemainingPriceOk() (float32, bool) {
	if o == nil || o.RemainingPrice == nil {
		var ret float32
		return ret, false
	}
	return *o.RemainingPrice, true
}

// HasRemainingPrice returns a boolean if a field has been set.
func (o *CartItemAdjustment) HasRemainingPrice() bool {
	if o != nil && o.RemainingPrice != nil {
		return true
	}

	return false
}

// SetRemainingPrice gets a reference to the given float32 and assigns it to the RemainingPrice field.
func (o *CartItemAdjustment) SetRemainingPrice(v float32) {
	o.RemainingPrice = &v
}

type NullableCartItemAdjustment struct {
	Value        CartItemAdjustment
	ExplicitNull bool
}

func (v NullableCartItemAdjustment) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableCartItemAdjustment) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
