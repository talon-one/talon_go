/*
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// CustomEffectProps Effect containing custom payload.
type CustomEffectProps struct {
	// The type of the custom effect.
	Type string `json:"type"`
	// The JSON payload of the custom effect.
	Payload map[string]interface{} `json:"payload"`
}

// GetType returns the Type field value
func (o *CustomEffectProps) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// SetType sets field value
func (o *CustomEffectProps) SetType(v string) {
	o.Type = v
}

// GetPayload returns the Payload field value
func (o *CustomEffectProps) GetPayload() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Payload
}

// SetPayload sets field value
func (o *CustomEffectProps) SetPayload(v map[string]interface{}) {
	o.Payload = v
}

type NullableCustomEffectProps struct {
	Value        CustomEffectProps
	ExplicitNull bool
}

func (v NullableCustomEffectProps) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableCustomEffectProps) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
