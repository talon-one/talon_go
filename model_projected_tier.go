/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * API version: 
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// ProjectedTier struct for ProjectedTier
type ProjectedTier struct {
	// The active points of the customer when their current tier expires.
	ProjectedActivePoints float32 `json:"projectedActivePoints"`
	// The number of points the customer needs to stay in the current tier.  **Note**: This is included in the response when the customer is projected to be downgraded. 
	StayInTierPoints *float32 `json:"stayInTierPoints,omitempty"`
	// The name of the tier the user will enter once their current tier expires.
	ProjectedTierName *string `json:"projectedTierName,omitempty"`
}

// GetProjectedActivePoints returns the ProjectedActivePoints field value
func (o *ProjectedTier) GetProjectedActivePoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ProjectedActivePoints
}

// SetProjectedActivePoints sets field value
func (o *ProjectedTier) SetProjectedActivePoints(v float32) {
	o.ProjectedActivePoints = v
}

// GetStayInTierPoints returns the StayInTierPoints field value if set, zero value otherwise.
func (o *ProjectedTier) GetStayInTierPoints() float32 {
	if o == nil || o.StayInTierPoints == nil {
		var ret float32
		return ret
	}
	return *o.StayInTierPoints
}

// GetStayInTierPointsOk returns a tuple with the StayInTierPoints field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ProjectedTier) GetStayInTierPointsOk() (float32, bool) {
	if o == nil || o.StayInTierPoints == nil {
		var ret float32
		return ret, false
	}
	return *o.StayInTierPoints, true
}

// HasStayInTierPoints returns a boolean if a field has been set.
func (o *ProjectedTier) HasStayInTierPoints() bool {
	if o != nil && o.StayInTierPoints != nil {
		return true
	}

	return false
}

// SetStayInTierPoints gets a reference to the given float32 and assigns it to the StayInTierPoints field.
func (o *ProjectedTier) SetStayInTierPoints(v float32) {
	o.StayInTierPoints = &v
}

// GetProjectedTierName returns the ProjectedTierName field value if set, zero value otherwise.
func (o *ProjectedTier) GetProjectedTierName() string {
	if o == nil || o.ProjectedTierName == nil {
		var ret string
		return ret
	}
	return *o.ProjectedTierName
}

// GetProjectedTierNameOk returns a tuple with the ProjectedTierName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ProjectedTier) GetProjectedTierNameOk() (string, bool) {
	if o == nil || o.ProjectedTierName == nil {
		var ret string
		return ret, false
	}
	return *o.ProjectedTierName, true
}

// HasProjectedTierName returns a boolean if a field has been set.
func (o *ProjectedTier) HasProjectedTierName() bool {
	if o != nil && o.ProjectedTierName != nil {
		return true
	}

	return false
}

// SetProjectedTierName gets a reference to the given string and assigns it to the ProjectedTierName field.
func (o *ProjectedTier) SetProjectedTierName(v string) {
	o.ProjectedTierName = &v
}

type NullableProjectedTier struct {
	Value ProjectedTier
	ExplicitNull bool
}

func (v NullableProjectedTier) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableProjectedTier) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
