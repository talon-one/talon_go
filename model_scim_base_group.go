/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * API version:
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// ScimBaseGroup Define the schema for base fields in a group using the SCIM provisioning protocol. Talon.One uses this schema to create roles.
type ScimBaseGroup struct {
	// Display name of the group (Talon.One role).
	DisplayName *string `json:"displayName,omitempty"`
	// List of members to assign to the new Talon.One role.
	Members *[]ScimGroupMember `json:"members,omitempty"`
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ScimBaseGroup) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ScimBaseGroup) GetDisplayNameOk() (string, bool) {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret, false
	}
	return *o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ScimBaseGroup) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ScimBaseGroup) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *ScimBaseGroup) GetMembers() []ScimGroupMember {
	if o == nil || o.Members == nil {
		var ret []ScimGroupMember
		return ret
	}
	return *o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ScimBaseGroup) GetMembersOk() ([]ScimGroupMember, bool) {
	if o == nil || o.Members == nil {
		var ret []ScimGroupMember
		return ret, false
	}
	return *o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *ScimBaseGroup) HasMembers() bool {
	if o != nil && o.Members != nil {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []ScimGroupMember and assigns it to the Members field.
func (o *ScimBaseGroup) SetMembers(v []ScimGroupMember) {
	o.Members = &v
}

type NullableScimBaseGroup struct {
	Value        ScimBaseGroup
	ExplicitNull bool
}

func (v NullableScimBaseGroup) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableScimBaseGroup) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
