/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * API version:
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// CardExpiringPointsNotificationPolicy struct for CardExpiringPointsNotificationPolicy
type CardExpiringPointsNotificationPolicy struct {
	// Notification name.
	Name     string                                  `json:"name"`
	Triggers []CardExpiringPointsNotificationTrigger `json:"triggers"`
	// Indicates whether batching is activated.
	BatchingEnabled *bool `json:"batchingEnabled,omitempty"`
	// The required size of each batch of data. This value applies only when `batchingEnabled` is `true`.
	BatchSize *int32 `json:"batchSize,omitempty"`
}

// GetName returns the Name field value
func (o *CardExpiringPointsNotificationPolicy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// SetName sets field value
func (o *CardExpiringPointsNotificationPolicy) SetName(v string) {
	o.Name = v
}

// GetTriggers returns the Triggers field value
func (o *CardExpiringPointsNotificationPolicy) GetTriggers() []CardExpiringPointsNotificationTrigger {
	if o == nil {
		var ret []CardExpiringPointsNotificationTrigger
		return ret
	}

	return o.Triggers
}

// SetTriggers sets field value
func (o *CardExpiringPointsNotificationPolicy) SetTriggers(v []CardExpiringPointsNotificationTrigger) {
	o.Triggers = v
}

// GetBatchingEnabled returns the BatchingEnabled field value if set, zero value otherwise.
func (o *CardExpiringPointsNotificationPolicy) GetBatchingEnabled() bool {
	if o == nil || o.BatchingEnabled == nil {
		var ret bool
		return ret
	}
	return *o.BatchingEnabled
}

// GetBatchingEnabledOk returns a tuple with the BatchingEnabled field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CardExpiringPointsNotificationPolicy) GetBatchingEnabledOk() (bool, bool) {
	if o == nil || o.BatchingEnabled == nil {
		var ret bool
		return ret, false
	}
	return *o.BatchingEnabled, true
}

// HasBatchingEnabled returns a boolean if a field has been set.
func (o *CardExpiringPointsNotificationPolicy) HasBatchingEnabled() bool {
	if o != nil && o.BatchingEnabled != nil {
		return true
	}

	return false
}

// SetBatchingEnabled gets a reference to the given bool and assigns it to the BatchingEnabled field.
func (o *CardExpiringPointsNotificationPolicy) SetBatchingEnabled(v bool) {
	o.BatchingEnabled = &v
}

// GetBatchSize returns the BatchSize field value if set, zero value otherwise.
func (o *CardExpiringPointsNotificationPolicy) GetBatchSize() int32 {
	if o == nil || o.BatchSize == nil {
		var ret int32
		return ret
	}
	return *o.BatchSize
}

// GetBatchSizeOk returns a tuple with the BatchSize field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *CardExpiringPointsNotificationPolicy) GetBatchSizeOk() (int32, bool) {
	if o == nil || o.BatchSize == nil {
		var ret int32
		return ret, false
	}
	return *o.BatchSize, true
}

// HasBatchSize returns a boolean if a field has been set.
func (o *CardExpiringPointsNotificationPolicy) HasBatchSize() bool {
	if o != nil && o.BatchSize != nil {
		return true
	}

	return false
}

// SetBatchSize gets a reference to the given int32 and assigns it to the BatchSize field.
func (o *CardExpiringPointsNotificationPolicy) SetBatchSize(v int32) {
	o.BatchSize = &v
}

type NullableCardExpiringPointsNotificationPolicy struct {
	Value        CardExpiringPointsNotificationPolicy
	ExplicitNull bool
}

func (v NullableCardExpiringPointsNotificationPolicy) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableCardExpiringPointsNotificationPolicy) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
