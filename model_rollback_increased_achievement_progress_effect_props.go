/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// RollbackIncreasedAchievementProgressEffectProps The properties specific to the \"rollbackIncreasedAchievementProgress\" effect. This gets triggered whenever a closed session where the `increaseAchievementProgress` effect was triggered is cancelled. This is applicable only when the customer has not completed the achievement.
type RollbackIncreasedAchievementProgressEffectProps struct {
	// The internal ID of the achievement.
	AchievementId int32 `json:"achievementId"`
	// The name of the achievement.
	AchievementName string `json:"achievementName"`
	// The internal ID of the achievement progress tracker.
	ProgressTrackerId int32 `json:"progressTrackerId"`
	// The value by which the customer's current progress in the achievement is decreased.
	DecreaseProgressBy float32 `json:"decreaseProgressBy"`
	// The current progress of the customer in the achievement.
	CurrentProgress float32 `json:"currentProgress"`
	// The target value to complete the achievement.
	Target float32 `json:"target"`
}

// GetAchievementId returns the AchievementId field value
func (o *RollbackIncreasedAchievementProgressEffectProps) GetAchievementId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AchievementId
}

// SetAchievementId sets field value
func (o *RollbackIncreasedAchievementProgressEffectProps) SetAchievementId(v int32) {
	o.AchievementId = v
}

// GetAchievementName returns the AchievementName field value
func (o *RollbackIncreasedAchievementProgressEffectProps) GetAchievementName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AchievementName
}

// SetAchievementName sets field value
func (o *RollbackIncreasedAchievementProgressEffectProps) SetAchievementName(v string) {
	o.AchievementName = v
}

// GetProgressTrackerId returns the ProgressTrackerId field value
func (o *RollbackIncreasedAchievementProgressEffectProps) GetProgressTrackerId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProgressTrackerId
}

// SetProgressTrackerId sets field value
func (o *RollbackIncreasedAchievementProgressEffectProps) SetProgressTrackerId(v int32) {
	o.ProgressTrackerId = v
}

// GetDecreaseProgressBy returns the DecreaseProgressBy field value
func (o *RollbackIncreasedAchievementProgressEffectProps) GetDecreaseProgressBy() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DecreaseProgressBy
}

// SetDecreaseProgressBy sets field value
func (o *RollbackIncreasedAchievementProgressEffectProps) SetDecreaseProgressBy(v float32) {
	o.DecreaseProgressBy = v
}

// GetCurrentProgress returns the CurrentProgress field value
func (o *RollbackIncreasedAchievementProgressEffectProps) GetCurrentProgress() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CurrentProgress
}

// SetCurrentProgress sets field value
func (o *RollbackIncreasedAchievementProgressEffectProps) SetCurrentProgress(v float32) {
	o.CurrentProgress = v
}

// GetTarget returns the Target field value
func (o *RollbackIncreasedAchievementProgressEffectProps) GetTarget() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Target
}

// SetTarget sets field value
func (o *RollbackIncreasedAchievementProgressEffectProps) SetTarget(v float32) {
	o.Target = v
}

type NullableRollbackIncreasedAchievementProgressEffectProps struct {
	Value RollbackIncreasedAchievementProgressEffectProps
	ExplicitNull bool
}

func (v NullableRollbackIncreasedAchievementProgressEffectProps) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableRollbackIncreasedAchievementProgressEffectProps) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
