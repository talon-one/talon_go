/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// LoyaltyProgramAllOf A Loyalty Program
type LoyaltyProgramAllOf struct {
	// The ID of loyalty program.
	Id int32 `json:"id"`
	// The ID of the Talon.One account that owns this program.
	AccountID int32 `json:"accountID"`
	// The internal name for the Loyalty Program. This is an immutable value.
	Name string `json:"name"`
	// The tiers in this loyalty program.
	Tiers *[]LoyaltyTier `json:"tiers,omitempty"`
	// A string containing an IANA timezone descriptor.
	Timezone string `json:"timezone"`
	// Defines the type of loyalty program: - `true`: the program is a card-based. - `false`: the program is profile-based. 
	CardBased bool `json:"cardBased"`
	// `True` if the tier definitions can be updated. 
	CanUpdateTiers *bool `json:"canUpdateTiers,omitempty"`
	// `True` if the program join policy can be updated. 
	CanUpdateJoinPolicy *bool `json:"canUpdateJoinPolicy,omitempty"`
	// `True` if the tier expiration policy can be updated. 
	CanUpdateTierExpirationPolicy *bool `json:"canUpdateTierExpirationPolicy,omitempty"`
	// `True` if the program can be upgraded to use the `tiersExpireIn` and `tiersDowngradePolicy` properties. 
	CanUpgradeToAdvancedTiers *bool `json:"canUpgradeToAdvancedTiers,omitempty"`
}

// GetId returns the Id field value
func (o *LoyaltyProgramAllOf) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// SetId sets field value
func (o *LoyaltyProgramAllOf) SetId(v int32) {
	o.Id = v
}

// GetAccountID returns the AccountID field value
func (o *LoyaltyProgramAllOf) GetAccountID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountID
}

// SetAccountID sets field value
func (o *LoyaltyProgramAllOf) SetAccountID(v int32) {
	o.AccountID = v
}

// GetName returns the Name field value
func (o *LoyaltyProgramAllOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// SetName sets field value
func (o *LoyaltyProgramAllOf) SetName(v string) {
	o.Name = v
}

// GetTiers returns the Tiers field value if set, zero value otherwise.
func (o *LoyaltyProgramAllOf) GetTiers() []LoyaltyTier {
	if o == nil || o.Tiers == nil {
		var ret []LoyaltyTier
		return ret
	}
	return *o.Tiers
}

// GetTiersOk returns a tuple with the Tiers field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyProgramAllOf) GetTiersOk() ([]LoyaltyTier, bool) {
	if o == nil || o.Tiers == nil {
		var ret []LoyaltyTier
		return ret, false
	}
	return *o.Tiers, true
}

// HasTiers returns a boolean if a field has been set.
func (o *LoyaltyProgramAllOf) HasTiers() bool {
	if o != nil && o.Tiers != nil {
		return true
	}

	return false
}

// SetTiers gets a reference to the given []LoyaltyTier and assigns it to the Tiers field.
func (o *LoyaltyProgramAllOf) SetTiers(v []LoyaltyTier) {
	o.Tiers = &v
}

// GetTimezone returns the Timezone field value
func (o *LoyaltyProgramAllOf) GetTimezone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timezone
}

// SetTimezone sets field value
func (o *LoyaltyProgramAllOf) SetTimezone(v string) {
	o.Timezone = v
}

// GetCardBased returns the CardBased field value
func (o *LoyaltyProgramAllOf) GetCardBased() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CardBased
}

// SetCardBased sets field value
func (o *LoyaltyProgramAllOf) SetCardBased(v bool) {
	o.CardBased = v
}

// GetCanUpdateTiers returns the CanUpdateTiers field value if set, zero value otherwise.
func (o *LoyaltyProgramAllOf) GetCanUpdateTiers() bool {
	if o == nil || o.CanUpdateTiers == nil {
		var ret bool
		return ret
	}
	return *o.CanUpdateTiers
}

// GetCanUpdateTiersOk returns a tuple with the CanUpdateTiers field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyProgramAllOf) GetCanUpdateTiersOk() (bool, bool) {
	if o == nil || o.CanUpdateTiers == nil {
		var ret bool
		return ret, false
	}
	return *o.CanUpdateTiers, true
}

// HasCanUpdateTiers returns a boolean if a field has been set.
func (o *LoyaltyProgramAllOf) HasCanUpdateTiers() bool {
	if o != nil && o.CanUpdateTiers != nil {
		return true
	}

	return false
}

// SetCanUpdateTiers gets a reference to the given bool and assigns it to the CanUpdateTiers field.
func (o *LoyaltyProgramAllOf) SetCanUpdateTiers(v bool) {
	o.CanUpdateTiers = &v
}

// GetCanUpdateJoinPolicy returns the CanUpdateJoinPolicy field value if set, zero value otherwise.
func (o *LoyaltyProgramAllOf) GetCanUpdateJoinPolicy() bool {
	if o == nil || o.CanUpdateJoinPolicy == nil {
		var ret bool
		return ret
	}
	return *o.CanUpdateJoinPolicy
}

// GetCanUpdateJoinPolicyOk returns a tuple with the CanUpdateJoinPolicy field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyProgramAllOf) GetCanUpdateJoinPolicyOk() (bool, bool) {
	if o == nil || o.CanUpdateJoinPolicy == nil {
		var ret bool
		return ret, false
	}
	return *o.CanUpdateJoinPolicy, true
}

// HasCanUpdateJoinPolicy returns a boolean if a field has been set.
func (o *LoyaltyProgramAllOf) HasCanUpdateJoinPolicy() bool {
	if o != nil && o.CanUpdateJoinPolicy != nil {
		return true
	}

	return false
}

// SetCanUpdateJoinPolicy gets a reference to the given bool and assigns it to the CanUpdateJoinPolicy field.
func (o *LoyaltyProgramAllOf) SetCanUpdateJoinPolicy(v bool) {
	o.CanUpdateJoinPolicy = &v
}

// GetCanUpdateTierExpirationPolicy returns the CanUpdateTierExpirationPolicy field value if set, zero value otherwise.
func (o *LoyaltyProgramAllOf) GetCanUpdateTierExpirationPolicy() bool {
	if o == nil || o.CanUpdateTierExpirationPolicy == nil {
		var ret bool
		return ret
	}
	return *o.CanUpdateTierExpirationPolicy
}

// GetCanUpdateTierExpirationPolicyOk returns a tuple with the CanUpdateTierExpirationPolicy field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyProgramAllOf) GetCanUpdateTierExpirationPolicyOk() (bool, bool) {
	if o == nil || o.CanUpdateTierExpirationPolicy == nil {
		var ret bool
		return ret, false
	}
	return *o.CanUpdateTierExpirationPolicy, true
}

// HasCanUpdateTierExpirationPolicy returns a boolean if a field has been set.
func (o *LoyaltyProgramAllOf) HasCanUpdateTierExpirationPolicy() bool {
	if o != nil && o.CanUpdateTierExpirationPolicy != nil {
		return true
	}

	return false
}

// SetCanUpdateTierExpirationPolicy gets a reference to the given bool and assigns it to the CanUpdateTierExpirationPolicy field.
func (o *LoyaltyProgramAllOf) SetCanUpdateTierExpirationPolicy(v bool) {
	o.CanUpdateTierExpirationPolicy = &v
}

// GetCanUpgradeToAdvancedTiers returns the CanUpgradeToAdvancedTiers field value if set, zero value otherwise.
func (o *LoyaltyProgramAllOf) GetCanUpgradeToAdvancedTiers() bool {
	if o == nil || o.CanUpgradeToAdvancedTiers == nil {
		var ret bool
		return ret
	}
	return *o.CanUpgradeToAdvancedTiers
}

// GetCanUpgradeToAdvancedTiersOk returns a tuple with the CanUpgradeToAdvancedTiers field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyProgramAllOf) GetCanUpgradeToAdvancedTiersOk() (bool, bool) {
	if o == nil || o.CanUpgradeToAdvancedTiers == nil {
		var ret bool
		return ret, false
	}
	return *o.CanUpgradeToAdvancedTiers, true
}

// HasCanUpgradeToAdvancedTiers returns a boolean if a field has been set.
func (o *LoyaltyProgramAllOf) HasCanUpgradeToAdvancedTiers() bool {
	if o != nil && o.CanUpgradeToAdvancedTiers != nil {
		return true
	}

	return false
}

// SetCanUpgradeToAdvancedTiers gets a reference to the given bool and assigns it to the CanUpgradeToAdvancedTiers field.
func (o *LoyaltyProgramAllOf) SetCanUpgradeToAdvancedTiers(v bool) {
	o.CanUpgradeToAdvancedTiers = &v
}

type NullableLoyaltyProgramAllOf struct {
	Value LoyaltyProgramAllOf
	ExplicitNull bool
}

func (v NullableLoyaltyProgramAllOf) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableLoyaltyProgramAllOf) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
