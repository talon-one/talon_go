/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}`
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// LimitCounter
type LimitCounter struct {
	// The ID of the campaign that owns this entity.
	CampaignId int32 `json:"campaignId"`
	// The ID of the application that owns this entity.
	ApplicationId int32 `json:"applicationId"`
	// The ID of the account that owns this entity.
	AccountId int32 `json:"accountId"`
	// Unique ID for this entity.
	Id int32 `json:"id"`
	// The limitable action of the limit counter.
	Action string `json:"action"`
	// The profile ID for which this limit counter is used.
	ProfileId *int32 `json:"profileId,omitempty"`
	// The profile integration ID for which this limit counter is used.
	ProfileIntegrationId *string `json:"profileIntegrationId,omitempty"`
	// The coupon ID for which this limit counter is used.
	CouponId *int32 `json:"couponId,omitempty"`
	// The coupon value for which this limit counter is used.
	CouponValue *string `json:"couponValue,omitempty"`
	// The referral ID for which this limit counter is used.
	ReferralId *int32 `json:"referralId,omitempty"`
	// The referral value for which this limit counter is used.
	ReferralValue *string `json:"referralValue,omitempty"`
	// The arbitrary identifier for which this limit counter is used.
	Identifier *int32 `json:"identifier,omitempty"`
	// The time period for which this limit counter is used.
	Period *string `json:"period,omitempty"`
	// The highest possible value for this limit counter.
	Limit float32 `json:"limit"`
	// The current value for this limit counter.
	Counter float32 `json:"counter"`
}

// GetCampaignId returns the CampaignId field value
func (o *LimitCounter) GetCampaignId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CampaignId
}

// SetCampaignId sets field value
func (o *LimitCounter) SetCampaignId(v int32) {
	o.CampaignId = v
}

// GetApplicationId returns the ApplicationId field value
func (o *LimitCounter) GetApplicationId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ApplicationId
}

// SetApplicationId sets field value
func (o *LimitCounter) SetApplicationId(v int32) {
	o.ApplicationId = v
}

// GetAccountId returns the AccountId field value
func (o *LimitCounter) GetAccountId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountId
}

// SetAccountId sets field value
func (o *LimitCounter) SetAccountId(v int32) {
	o.AccountId = v
}

// GetId returns the Id field value
func (o *LimitCounter) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// SetId sets field value
func (o *LimitCounter) SetId(v int32) {
	o.Id = v
}

// GetAction returns the Action field value
func (o *LimitCounter) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// SetAction sets field value
func (o *LimitCounter) SetAction(v string) {
	o.Action = v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *LimitCounter) GetProfileId() int32 {
	if o == nil || o.ProfileId == nil {
		var ret int32
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LimitCounter) GetProfileIdOk() (int32, bool) {
	if o == nil || o.ProfileId == nil {
		var ret int32
		return ret, false
	}
	return *o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *LimitCounter) HasProfileId() bool {
	if o != nil && o.ProfileId != nil {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given int32 and assigns it to the ProfileId field.
func (o *LimitCounter) SetProfileId(v int32) {
	o.ProfileId = &v
}

// GetProfileIntegrationId returns the ProfileIntegrationId field value if set, zero value otherwise.
func (o *LimitCounter) GetProfileIntegrationId() string {
	if o == nil || o.ProfileIntegrationId == nil {
		var ret string
		return ret
	}
	return *o.ProfileIntegrationId
}

// GetProfileIntegrationIdOk returns a tuple with the ProfileIntegrationId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LimitCounter) GetProfileIntegrationIdOk() (string, bool) {
	if o == nil || o.ProfileIntegrationId == nil {
		var ret string
		return ret, false
	}
	return *o.ProfileIntegrationId, true
}

// HasProfileIntegrationId returns a boolean if a field has been set.
func (o *LimitCounter) HasProfileIntegrationId() bool {
	if o != nil && o.ProfileIntegrationId != nil {
		return true
	}

	return false
}

// SetProfileIntegrationId gets a reference to the given string and assigns it to the ProfileIntegrationId field.
func (o *LimitCounter) SetProfileIntegrationId(v string) {
	o.ProfileIntegrationId = &v
}

// GetCouponId returns the CouponId field value if set, zero value otherwise.
func (o *LimitCounter) GetCouponId() int32 {
	if o == nil || o.CouponId == nil {
		var ret int32
		return ret
	}
	return *o.CouponId
}

// GetCouponIdOk returns a tuple with the CouponId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LimitCounter) GetCouponIdOk() (int32, bool) {
	if o == nil || o.CouponId == nil {
		var ret int32
		return ret, false
	}
	return *o.CouponId, true
}

// HasCouponId returns a boolean if a field has been set.
func (o *LimitCounter) HasCouponId() bool {
	if o != nil && o.CouponId != nil {
		return true
	}

	return false
}

// SetCouponId gets a reference to the given int32 and assigns it to the CouponId field.
func (o *LimitCounter) SetCouponId(v int32) {
	o.CouponId = &v
}

// GetCouponValue returns the CouponValue field value if set, zero value otherwise.
func (o *LimitCounter) GetCouponValue() string {
	if o == nil || o.CouponValue == nil {
		var ret string
		return ret
	}
	return *o.CouponValue
}

// GetCouponValueOk returns a tuple with the CouponValue field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LimitCounter) GetCouponValueOk() (string, bool) {
	if o == nil || o.CouponValue == nil {
		var ret string
		return ret, false
	}
	return *o.CouponValue, true
}

// HasCouponValue returns a boolean if a field has been set.
func (o *LimitCounter) HasCouponValue() bool {
	if o != nil && o.CouponValue != nil {
		return true
	}

	return false
}

// SetCouponValue gets a reference to the given string and assigns it to the CouponValue field.
func (o *LimitCounter) SetCouponValue(v string) {
	o.CouponValue = &v
}

// GetReferralId returns the ReferralId field value if set, zero value otherwise.
func (o *LimitCounter) GetReferralId() int32 {
	if o == nil || o.ReferralId == nil {
		var ret int32
		return ret
	}
	return *o.ReferralId
}

// GetReferralIdOk returns a tuple with the ReferralId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LimitCounter) GetReferralIdOk() (int32, bool) {
	if o == nil || o.ReferralId == nil {
		var ret int32
		return ret, false
	}
	return *o.ReferralId, true
}

// HasReferralId returns a boolean if a field has been set.
func (o *LimitCounter) HasReferralId() bool {
	if o != nil && o.ReferralId != nil {
		return true
	}

	return false
}

// SetReferralId gets a reference to the given int32 and assigns it to the ReferralId field.
func (o *LimitCounter) SetReferralId(v int32) {
	o.ReferralId = &v
}

// GetReferralValue returns the ReferralValue field value if set, zero value otherwise.
func (o *LimitCounter) GetReferralValue() string {
	if o == nil || o.ReferralValue == nil {
		var ret string
		return ret
	}
	return *o.ReferralValue
}

// GetReferralValueOk returns a tuple with the ReferralValue field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LimitCounter) GetReferralValueOk() (string, bool) {
	if o == nil || o.ReferralValue == nil {
		var ret string
		return ret, false
	}
	return *o.ReferralValue, true
}

// HasReferralValue returns a boolean if a field has been set.
func (o *LimitCounter) HasReferralValue() bool {
	if o != nil && o.ReferralValue != nil {
		return true
	}

	return false
}

// SetReferralValue gets a reference to the given string and assigns it to the ReferralValue field.
func (o *LimitCounter) SetReferralValue(v string) {
	o.ReferralValue = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *LimitCounter) GetIdentifier() int32 {
	if o == nil || o.Identifier == nil {
		var ret int32
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LimitCounter) GetIdentifierOk() (int32, bool) {
	if o == nil || o.Identifier == nil {
		var ret int32
		return ret, false
	}
	return *o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *LimitCounter) HasIdentifier() bool {
	if o != nil && o.Identifier != nil {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given int32 and assigns it to the Identifier field.
func (o *LimitCounter) SetIdentifier(v int32) {
	o.Identifier = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *LimitCounter) GetPeriod() string {
	if o == nil || o.Period == nil {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LimitCounter) GetPeriodOk() (string, bool) {
	if o == nil || o.Period == nil {
		var ret string
		return ret, false
	}
	return *o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *LimitCounter) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *LimitCounter) SetPeriod(v string) {
	o.Period = &v
}

// GetLimit returns the Limit field value
func (o *LimitCounter) GetLimit() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Limit
}

// SetLimit sets field value
func (o *LimitCounter) SetLimit(v float32) {
	o.Limit = v
}

// GetCounter returns the Counter field value
func (o *LimitCounter) GetCounter() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Counter
}

// SetCounter sets field value
func (o *LimitCounter) SetCounter(v float32) {
	o.Counter = v
}

type NullableLimitCounter struct {
	Value        LimitCounter
	ExplicitNull bool
}

func (v NullableLimitCounter) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableLimitCounter) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
