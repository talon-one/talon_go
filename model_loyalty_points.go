/*
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// LoyaltyPoints Points to add or deduct
type LoyaltyPoints struct {
	// Amount of loyalty points
	Points float32 `json:"points"`
	// Allows to specify a name for the addition or deduction
	Name *string `json:"name,omitempty"`
	// Indicates the duration after which the added loyalty points should expire. The format is a number followed by one letter indicating the unit, like '1h' or '40m' or '30d'.
	ExpiryDuration *string `json:"expiryDuration,omitempty"`
	// This specifies if we are adding loyalty points to the main ledger or a subledger
	SubLedgerID *string `json:"subLedgerID,omitempty"`
}

// GetPoints returns the Points field value
func (o *LoyaltyPoints) GetPoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Points
}

// SetPoints sets field value
func (o *LoyaltyPoints) SetPoints(v float32) {
	o.Points = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LoyaltyPoints) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyPoints) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LoyaltyPoints) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LoyaltyPoints) SetName(v string) {
	o.Name = &v
}

// GetExpiryDuration returns the ExpiryDuration field value if set, zero value otherwise.
func (o *LoyaltyPoints) GetExpiryDuration() string {
	if o == nil || o.ExpiryDuration == nil {
		var ret string
		return ret
	}
	return *o.ExpiryDuration
}

// GetExpiryDurationOk returns a tuple with the ExpiryDuration field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyPoints) GetExpiryDurationOk() (string, bool) {
	if o == nil || o.ExpiryDuration == nil {
		var ret string
		return ret, false
	}
	return *o.ExpiryDuration, true
}

// HasExpiryDuration returns a boolean if a field has been set.
func (o *LoyaltyPoints) HasExpiryDuration() bool {
	if o != nil && o.ExpiryDuration != nil {
		return true
	}

	return false
}

// SetExpiryDuration gets a reference to the given string and assigns it to the ExpiryDuration field.
func (o *LoyaltyPoints) SetExpiryDuration(v string) {
	o.ExpiryDuration = &v
}

// GetSubLedgerID returns the SubLedgerID field value if set, zero value otherwise.
func (o *LoyaltyPoints) GetSubLedgerID() string {
	if o == nil || o.SubLedgerID == nil {
		var ret string
		return ret
	}
	return *o.SubLedgerID
}

// GetSubLedgerIDOk returns a tuple with the SubLedgerID field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyPoints) GetSubLedgerIDOk() (string, bool) {
	if o == nil || o.SubLedgerID == nil {
		var ret string
		return ret, false
	}
	return *o.SubLedgerID, true
}

// HasSubLedgerID returns a boolean if a field has been set.
func (o *LoyaltyPoints) HasSubLedgerID() bool {
	if o != nil && o.SubLedgerID != nil {
		return true
	}

	return false
}

// SetSubLedgerID gets a reference to the given string and assigns it to the SubLedgerID field.
func (o *LoyaltyPoints) SetSubLedgerID(v string) {
	o.SubLedgerID = &v
}

type NullableLoyaltyPoints struct {
	Value        LoyaltyPoints
	ExplicitNull bool
}

func (v NullableLoyaltyPoints) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableLoyaltyPoints) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
