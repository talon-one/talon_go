/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * API version:
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
	"time"
)

// AchievementProgressWithDefinition The current progress of the customer in the achievement.
type AchievementProgressWithDefinition struct {
	// The status of the achievement.
	Status string `json:"status"`
	// The current progress of the customer in the achievement.
	Progress float32 `json:"progress"`
	// Timestamp at which the customer started the achievement.
	StartDate *time.Time `json:"startDate,omitempty"`
	// Timestamp at which point the customer completed the achievement.
	CompletionDate *time.Time `json:"completionDate,omitempty"`
	// Timestamp at which point the achievement ends and resets for the customer.
	EndDate *time.Time `json:"endDate,omitempty"`
	// The internal ID of the achievement.
	AchievementId int32 `json:"achievementId"`
	// The internal name of the achievement used in API requests.
	Name string `json:"name"`
	// The display name of the achievement in the Campaign Manager.
	Title string `json:"title"`
	// The description of the achievement in the Campaign Manager.
	Description string `json:"description"`
	// The ID of the campaign the achievement belongs to.
	CampaignId int32 `json:"campaignId"`
	// The required number of actions or the transactional milestone to complete the achievement.
	Target *float32 `json:"target,omitempty"`
	// The policy that determines if and how the achievement recurs. - `no_recurrence`: The achievement can be completed only once. - `on_expiration`: The achievement resets after it expires and becomes available again.
	AchievementRecurrencePolicy string `json:"achievementRecurrencePolicy"`
	// The policy that determines how the achievement starts, ends, or resets. - `user_action`: The achievement ends or resets relative to when the customer started the achievement. - `fixed_schedule`: The achievement starts, ends, or resets for all customers following a fixed schedule.
	AchievementActivationPolicy string `json:"achievementActivationPolicy"`
	// The achievement's start date when `achievementActivationPolicy` is equal to `fixed_schedule`.  **Note:** It is an RFC3339 timestamp string.
	AchievementFixedStartDate *time.Time `json:"achievementFixedStartDate,omitempty"`
	// The achievement's end date. If defined, customers cannot participate in the achievement after this date.  **Note:** It is an RFC3339 timestamp string.
	AchievementEndDate *time.Time `json:"achievementEndDate,omitempty"`
}

// GetStatus returns the Status field value
func (o *AchievementProgressWithDefinition) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// SetStatus sets field value
func (o *AchievementProgressWithDefinition) SetStatus(v string) {
	o.Status = v
}

// GetProgress returns the Progress field value
func (o *AchievementProgressWithDefinition) GetProgress() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Progress
}

// SetProgress sets field value
func (o *AchievementProgressWithDefinition) SetProgress(v float32) {
	o.Progress = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *AchievementProgressWithDefinition) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AchievementProgressWithDefinition) GetStartDateOk() (time.Time, bool) {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret, false
	}
	return *o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *AchievementProgressWithDefinition) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *AchievementProgressWithDefinition) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetCompletionDate returns the CompletionDate field value if set, zero value otherwise.
func (o *AchievementProgressWithDefinition) GetCompletionDate() time.Time {
	if o == nil || o.CompletionDate == nil {
		var ret time.Time
		return ret
	}
	return *o.CompletionDate
}

// GetCompletionDateOk returns a tuple with the CompletionDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AchievementProgressWithDefinition) GetCompletionDateOk() (time.Time, bool) {
	if o == nil || o.CompletionDate == nil {
		var ret time.Time
		return ret, false
	}
	return *o.CompletionDate, true
}

// HasCompletionDate returns a boolean if a field has been set.
func (o *AchievementProgressWithDefinition) HasCompletionDate() bool {
	if o != nil && o.CompletionDate != nil {
		return true
	}

	return false
}

// SetCompletionDate gets a reference to the given time.Time and assigns it to the CompletionDate field.
func (o *AchievementProgressWithDefinition) SetCompletionDate(v time.Time) {
	o.CompletionDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *AchievementProgressWithDefinition) GetEndDate() time.Time {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AchievementProgressWithDefinition) GetEndDateOk() (time.Time, bool) {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret, false
	}
	return *o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *AchievementProgressWithDefinition) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *AchievementProgressWithDefinition) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetAchievementId returns the AchievementId field value
func (o *AchievementProgressWithDefinition) GetAchievementId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AchievementId
}

// SetAchievementId sets field value
func (o *AchievementProgressWithDefinition) SetAchievementId(v int32) {
	o.AchievementId = v
}

// GetName returns the Name field value
func (o *AchievementProgressWithDefinition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// SetName sets field value
func (o *AchievementProgressWithDefinition) SetName(v string) {
	o.Name = v
}

// GetTitle returns the Title field value
func (o *AchievementProgressWithDefinition) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// SetTitle sets field value
func (o *AchievementProgressWithDefinition) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value
func (o *AchievementProgressWithDefinition) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// SetDescription sets field value
func (o *AchievementProgressWithDefinition) SetDescription(v string) {
	o.Description = v
}

// GetCampaignId returns the CampaignId field value
func (o *AchievementProgressWithDefinition) GetCampaignId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CampaignId
}

// SetCampaignId sets field value
func (o *AchievementProgressWithDefinition) SetCampaignId(v int32) {
	o.CampaignId = v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *AchievementProgressWithDefinition) GetTarget() float32 {
	if o == nil || o.Target == nil {
		var ret float32
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AchievementProgressWithDefinition) GetTargetOk() (float32, bool) {
	if o == nil || o.Target == nil {
		var ret float32
		return ret, false
	}
	return *o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *AchievementProgressWithDefinition) HasTarget() bool {
	if o != nil && o.Target != nil {
		return true
	}

	return false
}

// SetTarget gets a reference to the given float32 and assigns it to the Target field.
func (o *AchievementProgressWithDefinition) SetTarget(v float32) {
	o.Target = &v
}

// GetAchievementRecurrencePolicy returns the AchievementRecurrencePolicy field value
func (o *AchievementProgressWithDefinition) GetAchievementRecurrencePolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AchievementRecurrencePolicy
}

// SetAchievementRecurrencePolicy sets field value
func (o *AchievementProgressWithDefinition) SetAchievementRecurrencePolicy(v string) {
	o.AchievementRecurrencePolicy = v
}

// GetAchievementActivationPolicy returns the AchievementActivationPolicy field value
func (o *AchievementProgressWithDefinition) GetAchievementActivationPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AchievementActivationPolicy
}

// SetAchievementActivationPolicy sets field value
func (o *AchievementProgressWithDefinition) SetAchievementActivationPolicy(v string) {
	o.AchievementActivationPolicy = v
}

// GetAchievementFixedStartDate returns the AchievementFixedStartDate field value if set, zero value otherwise.
func (o *AchievementProgressWithDefinition) GetAchievementFixedStartDate() time.Time {
	if o == nil || o.AchievementFixedStartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.AchievementFixedStartDate
}

// GetAchievementFixedStartDateOk returns a tuple with the AchievementFixedStartDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AchievementProgressWithDefinition) GetAchievementFixedStartDateOk() (time.Time, bool) {
	if o == nil || o.AchievementFixedStartDate == nil {
		var ret time.Time
		return ret, false
	}
	return *o.AchievementFixedStartDate, true
}

// HasAchievementFixedStartDate returns a boolean if a field has been set.
func (o *AchievementProgressWithDefinition) HasAchievementFixedStartDate() bool {
	if o != nil && o.AchievementFixedStartDate != nil {
		return true
	}

	return false
}

// SetAchievementFixedStartDate gets a reference to the given time.Time and assigns it to the AchievementFixedStartDate field.
func (o *AchievementProgressWithDefinition) SetAchievementFixedStartDate(v time.Time) {
	o.AchievementFixedStartDate = &v
}

// GetAchievementEndDate returns the AchievementEndDate field value if set, zero value otherwise.
func (o *AchievementProgressWithDefinition) GetAchievementEndDate() time.Time {
	if o == nil || o.AchievementEndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.AchievementEndDate
}

// GetAchievementEndDateOk returns a tuple with the AchievementEndDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *AchievementProgressWithDefinition) GetAchievementEndDateOk() (time.Time, bool) {
	if o == nil || o.AchievementEndDate == nil {
		var ret time.Time
		return ret, false
	}
	return *o.AchievementEndDate, true
}

// HasAchievementEndDate returns a boolean if a field has been set.
func (o *AchievementProgressWithDefinition) HasAchievementEndDate() bool {
	if o != nil && o.AchievementEndDate != nil {
		return true
	}

	return false
}

// SetAchievementEndDate gets a reference to the given time.Time and assigns it to the AchievementEndDate field.
func (o *AchievementProgressWithDefinition) SetAchievementEndDate(v time.Time) {
	o.AchievementEndDate = &v
}

type NullableAchievementProgressWithDefinition struct {
	Value        AchievementProgressWithDefinition
	ExplicitNull bool
}

func (v NullableAchievementProgressWithDefinition) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableAchievementProgressWithDefinition) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
