/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * API version:
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
	"time"
)

// PriceDetail struct for PriceDetail
type PriceDetail struct {
	// The value of this price type.
	Price *float32 `json:"price,omitempty"`
	// The reference identifier of the selected price adjustment for this SKU.
	AdjustmentReferenceId *string `json:"adjustmentReferenceId,omitempty"`
	// The date and time from which the price adjustment is effective.
	AdjustmentEffectiveFrom *time.Time `json:"adjustmentEffectiveFrom,omitempty"`
	// The date and time until which the price adjustment is effective.
	AdjustmentEffectiveUntil *time.Time `json:"adjustmentEffectiveUntil,omitempty"`
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *PriceDetail) GetPrice() float32 {
	if o == nil || o.Price == nil {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *PriceDetail) GetPriceOk() (float32, bool) {
	if o == nil || o.Price == nil {
		var ret float32
		return ret, false
	}
	return *o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *PriceDetail) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *PriceDetail) SetPrice(v float32) {
	o.Price = &v
}

// GetAdjustmentReferenceId returns the AdjustmentReferenceId field value if set, zero value otherwise.
func (o *PriceDetail) GetAdjustmentReferenceId() string {
	if o == nil || o.AdjustmentReferenceId == nil {
		var ret string
		return ret
	}
	return *o.AdjustmentReferenceId
}

// GetAdjustmentReferenceIdOk returns a tuple with the AdjustmentReferenceId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *PriceDetail) GetAdjustmentReferenceIdOk() (string, bool) {
	if o == nil || o.AdjustmentReferenceId == nil {
		var ret string
		return ret, false
	}
	return *o.AdjustmentReferenceId, true
}

// HasAdjustmentReferenceId returns a boolean if a field has been set.
func (o *PriceDetail) HasAdjustmentReferenceId() bool {
	if o != nil && o.AdjustmentReferenceId != nil {
		return true
	}

	return false
}

// SetAdjustmentReferenceId gets a reference to the given string and assigns it to the AdjustmentReferenceId field.
func (o *PriceDetail) SetAdjustmentReferenceId(v string) {
	o.AdjustmentReferenceId = &v
}

// GetAdjustmentEffectiveFrom returns the AdjustmentEffectiveFrom field value if set, zero value otherwise.
func (o *PriceDetail) GetAdjustmentEffectiveFrom() time.Time {
	if o == nil || o.AdjustmentEffectiveFrom == nil {
		var ret time.Time
		return ret
	}
	return *o.AdjustmentEffectiveFrom
}

// GetAdjustmentEffectiveFromOk returns a tuple with the AdjustmentEffectiveFrom field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *PriceDetail) GetAdjustmentEffectiveFromOk() (time.Time, bool) {
	if o == nil || o.AdjustmentEffectiveFrom == nil {
		var ret time.Time
		return ret, false
	}
	return *o.AdjustmentEffectiveFrom, true
}

// HasAdjustmentEffectiveFrom returns a boolean if a field has been set.
func (o *PriceDetail) HasAdjustmentEffectiveFrom() bool {
	if o != nil && o.AdjustmentEffectiveFrom != nil {
		return true
	}

	return false
}

// SetAdjustmentEffectiveFrom gets a reference to the given time.Time and assigns it to the AdjustmentEffectiveFrom field.
func (o *PriceDetail) SetAdjustmentEffectiveFrom(v time.Time) {
	o.AdjustmentEffectiveFrom = &v
}

// GetAdjustmentEffectiveUntil returns the AdjustmentEffectiveUntil field value if set, zero value otherwise.
func (o *PriceDetail) GetAdjustmentEffectiveUntil() time.Time {
	if o == nil || o.AdjustmentEffectiveUntil == nil {
		var ret time.Time
		return ret
	}
	return *o.AdjustmentEffectiveUntil
}

// GetAdjustmentEffectiveUntilOk returns a tuple with the AdjustmentEffectiveUntil field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *PriceDetail) GetAdjustmentEffectiveUntilOk() (time.Time, bool) {
	if o == nil || o.AdjustmentEffectiveUntil == nil {
		var ret time.Time
		return ret, false
	}
	return *o.AdjustmentEffectiveUntil, true
}

// HasAdjustmentEffectiveUntil returns a boolean if a field has been set.
func (o *PriceDetail) HasAdjustmentEffectiveUntil() bool {
	if o != nil && o.AdjustmentEffectiveUntil != nil {
		return true
	}

	return false
}

// SetAdjustmentEffectiveUntil gets a reference to the given time.Time and assigns it to the AdjustmentEffectiveUntil field.
func (o *PriceDetail) SetAdjustmentEffectiveUntil(v time.Time) {
	o.AdjustmentEffectiveUntil = &v
}

type NullablePriceDetail struct {
	Value        PriceDetail
	ExplicitNull bool
}

func (v NullablePriceDetail) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullablePriceDetail) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
