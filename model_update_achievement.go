/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`
 *
 * API version:
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
	"time"
)

// UpdateAchievement struct for UpdateAchievement
type UpdateAchievement struct {
	// The internal name of the achievement used in API requests.  **Note**: The name should start with a letter. This cannot be changed after the achievement has been created.
	Name *string `json:"name,omitempty"`
	// The display name for the achievement in the Campaign Manager.
	Title *string `json:"title,omitempty"`
	// A description of the achievement.
	Description *string `json:"description,omitempty"`
	// The required number of actions or the transactional milestone to complete the achievement.
	Target *float32 `json:"target,omitempty"`
	// The relative duration after which the achievement ends and resets for a particular customer profile.  **Note**: The `period` does not start when the achievement is created.  The period is a **positive real number** followed by one letter indicating the time unit.  Examples: `30s`, `40m`, `1h`, `5D`, `7W`, `10M`, `15Y`.  Available units:  - `s`: seconds - `m`: minutes - `h`: hours - `D`: days - `W`: weeks - `M`: months - `Y`: years  You can also round certain units down to the beginning of period and up to the end of period.: - `_D` for rounding down days only. Signifies the start of the day. Example: `30D_D` - `_U` for rounding up days, weeks, months and years. Signifies the end of the day, week, month or year. Example: `23W_U`  **Note**: You can either use the round down and round up option or set an absolute period.
	Period            *string    `json:"period,omitempty"`
	PeriodEndOverride *TimePoint `json:"periodEndOverride,omitempty"`
	// The policy that determines if and how the achievement recurs. - `no_recurrence`: The achievement can be completed only once. - `on_expiration`: The achievement resets after it expires and becomes available again.
	RecurrencePolicy *string `json:"recurrencePolicy,omitempty"`
	// The policy that determines how the achievement starts, ends, or resets. - `user_action`: The achievement ends or resets relative to when the customer started the achievement. - `fixed_schedule`: The achievement starts, ends, or resets for all customers following a fixed schedule.
	ActivationPolicy *string `json:"activationPolicy,omitempty"`
	// The achievement's start date when `activationPolicy` is set to `fixed_schedule`.  **Note:** It must be an RFC3339 timestamp string.
	FixedStartDate *time.Time `json:"fixedStartDate,omitempty"`
	// The achievement's end date. If defined, customers cannot participate in the achievement after this date.  **Note:** It must be an RFC3339 timestamp string.
	EndDate *time.Time `json:"endDate,omitempty"`
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateAchievement) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAchievement) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateAchievement) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateAchievement) SetName(v string) {
	o.Name = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *UpdateAchievement) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAchievement) GetTitleOk() (string, bool) {
	if o == nil || o.Title == nil {
		var ret string
		return ret, false
	}
	return *o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *UpdateAchievement) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *UpdateAchievement) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateAchievement) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAchievement) GetDescriptionOk() (string, bool) {
	if o == nil || o.Description == nil {
		var ret string
		return ret, false
	}
	return *o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateAchievement) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateAchievement) SetDescription(v string) {
	o.Description = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *UpdateAchievement) GetTarget() float32 {
	if o == nil || o.Target == nil {
		var ret float32
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAchievement) GetTargetOk() (float32, bool) {
	if o == nil || o.Target == nil {
		var ret float32
		return ret, false
	}
	return *o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *UpdateAchievement) HasTarget() bool {
	if o != nil && o.Target != nil {
		return true
	}

	return false
}

// SetTarget gets a reference to the given float32 and assigns it to the Target field.
func (o *UpdateAchievement) SetTarget(v float32) {
	o.Target = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *UpdateAchievement) GetPeriod() string {
	if o == nil || o.Period == nil {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAchievement) GetPeriodOk() (string, bool) {
	if o == nil || o.Period == nil {
		var ret string
		return ret, false
	}
	return *o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *UpdateAchievement) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *UpdateAchievement) SetPeriod(v string) {
	o.Period = &v
}

// GetPeriodEndOverride returns the PeriodEndOverride field value if set, zero value otherwise.
func (o *UpdateAchievement) GetPeriodEndOverride() TimePoint {
	if o == nil || o.PeriodEndOverride == nil {
		var ret TimePoint
		return ret
	}
	return *o.PeriodEndOverride
}

// GetPeriodEndOverrideOk returns a tuple with the PeriodEndOverride field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAchievement) GetPeriodEndOverrideOk() (TimePoint, bool) {
	if o == nil || o.PeriodEndOverride == nil {
		var ret TimePoint
		return ret, false
	}
	return *o.PeriodEndOverride, true
}

// HasPeriodEndOverride returns a boolean if a field has been set.
func (o *UpdateAchievement) HasPeriodEndOverride() bool {
	if o != nil && o.PeriodEndOverride != nil {
		return true
	}

	return false
}

// SetPeriodEndOverride gets a reference to the given TimePoint and assigns it to the PeriodEndOverride field.
func (o *UpdateAchievement) SetPeriodEndOverride(v TimePoint) {
	o.PeriodEndOverride = &v
}

// GetRecurrencePolicy returns the RecurrencePolicy field value if set, zero value otherwise.
func (o *UpdateAchievement) GetRecurrencePolicy() string {
	if o == nil || o.RecurrencePolicy == nil {
		var ret string
		return ret
	}
	return *o.RecurrencePolicy
}

// GetRecurrencePolicyOk returns a tuple with the RecurrencePolicy field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAchievement) GetRecurrencePolicyOk() (string, bool) {
	if o == nil || o.RecurrencePolicy == nil {
		var ret string
		return ret, false
	}
	return *o.RecurrencePolicy, true
}

// HasRecurrencePolicy returns a boolean if a field has been set.
func (o *UpdateAchievement) HasRecurrencePolicy() bool {
	if o != nil && o.RecurrencePolicy != nil {
		return true
	}

	return false
}

// SetRecurrencePolicy gets a reference to the given string and assigns it to the RecurrencePolicy field.
func (o *UpdateAchievement) SetRecurrencePolicy(v string) {
	o.RecurrencePolicy = &v
}

// GetActivationPolicy returns the ActivationPolicy field value if set, zero value otherwise.
func (o *UpdateAchievement) GetActivationPolicy() string {
	if o == nil || o.ActivationPolicy == nil {
		var ret string
		return ret
	}
	return *o.ActivationPolicy
}

// GetActivationPolicyOk returns a tuple with the ActivationPolicy field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAchievement) GetActivationPolicyOk() (string, bool) {
	if o == nil || o.ActivationPolicy == nil {
		var ret string
		return ret, false
	}
	return *o.ActivationPolicy, true
}

// HasActivationPolicy returns a boolean if a field has been set.
func (o *UpdateAchievement) HasActivationPolicy() bool {
	if o != nil && o.ActivationPolicy != nil {
		return true
	}

	return false
}

// SetActivationPolicy gets a reference to the given string and assigns it to the ActivationPolicy field.
func (o *UpdateAchievement) SetActivationPolicy(v string) {
	o.ActivationPolicy = &v
}

// GetFixedStartDate returns the FixedStartDate field value if set, zero value otherwise.
func (o *UpdateAchievement) GetFixedStartDate() time.Time {
	if o == nil || o.FixedStartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.FixedStartDate
}

// GetFixedStartDateOk returns a tuple with the FixedStartDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAchievement) GetFixedStartDateOk() (time.Time, bool) {
	if o == nil || o.FixedStartDate == nil {
		var ret time.Time
		return ret, false
	}
	return *o.FixedStartDate, true
}

// HasFixedStartDate returns a boolean if a field has been set.
func (o *UpdateAchievement) HasFixedStartDate() bool {
	if o != nil && o.FixedStartDate != nil {
		return true
	}

	return false
}

// SetFixedStartDate gets a reference to the given time.Time and assigns it to the FixedStartDate field.
func (o *UpdateAchievement) SetFixedStartDate(v time.Time) {
	o.FixedStartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *UpdateAchievement) GetEndDate() time.Time {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAchievement) GetEndDateOk() (time.Time, bool) {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret, false
	}
	return *o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *UpdateAchievement) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *UpdateAchievement) SetEndDate(v time.Time) {
	o.EndDate = &v
}

type NullableUpdateAchievement struct {
	Value        UpdateAchievement
	ExplicitNull bool
}

func (v NullableUpdateAchievement) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableUpdateAchievement) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
