/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}`
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
	"time"
)

// LoyaltyProgram
type LoyaltyProgram struct {
	// The ID of loyalty program. Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.
	Id int32 `json:"id"`
	// The exact moment this entity was created.
	Created time.Time `json:"created"`
	// The display title for the Loyalty Program.
	Title string `json:"title"`
	// Description of our Loyalty Program.
	Description string `json:"description"`
	// A list containing the IDs of all applications that are subscribed to this Loyalty Program.
	SubscribedApplications []int32 `json:"subscribedApplications"`
	// Indicates the default duration after which new loyalty points should expire. The format is a number, followed by one letter indicating the unit; like '1h' or '40m'.
	DefaultValidity string `json:"defaultValidity"`
	// Indicates the default duration for the pending time, after which points will be valid. The format is a number followed by a duration unit, like '1h' or '40m'.
	DefaultPending string `json:"defaultPending"`
	// Indicates if this program supports subledgers inside the program.
	AllowSubledger bool `json:"allowSubledger"`
	// The max amount of user profiles with whom a card can be shared. This can be set to 0 for no limit. This property is only used when `cardBased` is `true`.
	UsersPerCardLimit *int32 `json:"usersPerCardLimit,omitempty"`
	// The ID of the Talon.One account that owns this program.
	AccountID int32 `json:"accountID"`
	// The internal name for the Loyalty Program. This is an immutable value.
	Name string `json:"name"`
	// The tiers in this loyalty program.
	Tiers *[]LoyaltyTier `json:"tiers,omitempty"`
	// A string containing an IANA timezone descriptor.
	Timezone string `json:"timezone"`
	// Defines the type of loyalty program: - `true`: the program is a card-based. - `false`: the program is profile-based.
	CardBased bool `json:"cardBased"`
}

// GetId returns the Id field value
func (o *LoyaltyProgram) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// SetId sets field value
func (o *LoyaltyProgram) SetId(v int32) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *LoyaltyProgram) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// SetCreated sets field value
func (o *LoyaltyProgram) SetCreated(v time.Time) {
	o.Created = v
}

// GetTitle returns the Title field value
func (o *LoyaltyProgram) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// SetTitle sets field value
func (o *LoyaltyProgram) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value
func (o *LoyaltyProgram) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// SetDescription sets field value
func (o *LoyaltyProgram) SetDescription(v string) {
	o.Description = v
}

// GetSubscribedApplications returns the SubscribedApplications field value
func (o *LoyaltyProgram) GetSubscribedApplications() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.SubscribedApplications
}

// SetSubscribedApplications sets field value
func (o *LoyaltyProgram) SetSubscribedApplications(v []int32) {
	o.SubscribedApplications = v
}

// GetDefaultValidity returns the DefaultValidity field value
func (o *LoyaltyProgram) GetDefaultValidity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultValidity
}

// SetDefaultValidity sets field value
func (o *LoyaltyProgram) SetDefaultValidity(v string) {
	o.DefaultValidity = v
}

// GetDefaultPending returns the DefaultPending field value
func (o *LoyaltyProgram) GetDefaultPending() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultPending
}

// SetDefaultPending sets field value
func (o *LoyaltyProgram) SetDefaultPending(v string) {
	o.DefaultPending = v
}

// GetAllowSubledger returns the AllowSubledger field value
func (o *LoyaltyProgram) GetAllowSubledger() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowSubledger
}

// SetAllowSubledger sets field value
func (o *LoyaltyProgram) SetAllowSubledger(v bool) {
	o.AllowSubledger = v
}

// GetUsersPerCardLimit returns the UsersPerCardLimit field value if set, zero value otherwise.
func (o *LoyaltyProgram) GetUsersPerCardLimit() int32 {
	if o == nil || o.UsersPerCardLimit == nil {
		var ret int32
		return ret
	}
	return *o.UsersPerCardLimit
}

// GetUsersPerCardLimitOk returns a tuple with the UsersPerCardLimit field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyProgram) GetUsersPerCardLimitOk() (int32, bool) {
	if o == nil || o.UsersPerCardLimit == nil {
		var ret int32
		return ret, false
	}
	return *o.UsersPerCardLimit, true
}

// HasUsersPerCardLimit returns a boolean if a field has been set.
func (o *LoyaltyProgram) HasUsersPerCardLimit() bool {
	if o != nil && o.UsersPerCardLimit != nil {
		return true
	}

	return false
}

// SetUsersPerCardLimit gets a reference to the given int32 and assigns it to the UsersPerCardLimit field.
func (o *LoyaltyProgram) SetUsersPerCardLimit(v int32) {
	o.UsersPerCardLimit = &v
}

// GetAccountID returns the AccountID field value
func (o *LoyaltyProgram) GetAccountID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountID
}

// SetAccountID sets field value
func (o *LoyaltyProgram) SetAccountID(v int32) {
	o.AccountID = v
}

// GetName returns the Name field value
func (o *LoyaltyProgram) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// SetName sets field value
func (o *LoyaltyProgram) SetName(v string) {
	o.Name = v
}

// GetTiers returns the Tiers field value if set, zero value otherwise.
func (o *LoyaltyProgram) GetTiers() []LoyaltyTier {
	if o == nil || o.Tiers == nil {
		var ret []LoyaltyTier
		return ret
	}
	return *o.Tiers
}

// GetTiersOk returns a tuple with the Tiers field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyProgram) GetTiersOk() ([]LoyaltyTier, bool) {
	if o == nil || o.Tiers == nil {
		var ret []LoyaltyTier
		return ret, false
	}
	return *o.Tiers, true
}

// HasTiers returns a boolean if a field has been set.
func (o *LoyaltyProgram) HasTiers() bool {
	if o != nil && o.Tiers != nil {
		return true
	}

	return false
}

// SetTiers gets a reference to the given []LoyaltyTier and assigns it to the Tiers field.
func (o *LoyaltyProgram) SetTiers(v []LoyaltyTier) {
	o.Tiers = &v
}

// GetTimezone returns the Timezone field value
func (o *LoyaltyProgram) GetTimezone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timezone
}

// SetTimezone sets field value
func (o *LoyaltyProgram) SetTimezone(v string) {
	o.Timezone = v
}

// GetCardBased returns the CardBased field value
func (o *LoyaltyProgram) GetCardBased() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CardBased
}

// SetCardBased sets field value
func (o *LoyaltyProgram) SetCardBased(v bool) {
	o.CardBased = v
}

type NullableLoyaltyProgram struct {
	Value        LoyaltyProgram
	ExplicitNull bool
}

func (v NullableLoyaltyProgram) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableLoyaltyProgram) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
