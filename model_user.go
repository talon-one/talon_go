/*
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
	"time"
)

// User
type User struct {
	// Unique ID for this entity.
	Id int32 `json:"id"`
	// The exact moment this entity was created.
	Created time.Time `json:"created"`
	// The exact moment this entity was last modified.
	Modified time.Time `json:"modified"`
	// The email address associated with your account.
	Email string `json:"email"`
	// The ID of the account that owns this entity.
	AccountId int32 `json:"accountId"`
	// Invite token, empty if the user as already accepted their invite.
	InviteToken string `json:"inviteToken"`
	// Current user state.
	State string `json:"state"`
	// Full name
	Name string `json:"name"`
	// A blob of ACL JSON
	Policy string `json:"policy"`
	// Update the user via email
	ReleaseUpdate bool `json:"releaseUpdate"`
	// Latest feature the user has been notified.
	LatestFeature *string `json:"latestFeature,omitempty"`
	// Contains a list of all roles the user is a member of
	Roles                                *[]int32                `json:"roles,omitempty"`
	ApplicationNotificationSubscriptions *map[string]interface{} `json:"applicationNotificationSubscriptions,omitempty"`
	// The Authentication method for this user
	AuthMethod *string `json:"authMethod,omitempty"`
}

// GetId returns the Id field value
func (o *User) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// SetId sets field value
func (o *User) SetId(v int32) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *User) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// SetCreated sets field value
func (o *User) SetCreated(v time.Time) {
	o.Created = v
}

// GetModified returns the Modified field value
func (o *User) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// SetModified sets field value
func (o *User) SetModified(v time.Time) {
	o.Modified = v
}

// GetEmail returns the Email field value
func (o *User) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// SetEmail sets field value
func (o *User) SetEmail(v string) {
	o.Email = v
}

// GetAccountId returns the AccountId field value
func (o *User) GetAccountId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountId
}

// SetAccountId sets field value
func (o *User) SetAccountId(v int32) {
	o.AccountId = v
}

// GetInviteToken returns the InviteToken field value
func (o *User) GetInviteToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InviteToken
}

// SetInviteToken sets field value
func (o *User) SetInviteToken(v string) {
	o.InviteToken = v
}

// GetState returns the State field value
func (o *User) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// SetState sets field value
func (o *User) SetState(v string) {
	o.State = v
}

// GetName returns the Name field value
func (o *User) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// SetName sets field value
func (o *User) SetName(v string) {
	o.Name = v
}

// GetPolicy returns the Policy field value
func (o *User) GetPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Policy
}

// SetPolicy sets field value
func (o *User) SetPolicy(v string) {
	o.Policy = v
}

// GetReleaseUpdate returns the ReleaseUpdate field value
func (o *User) GetReleaseUpdate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ReleaseUpdate
}

// SetReleaseUpdate sets field value
func (o *User) SetReleaseUpdate(v bool) {
	o.ReleaseUpdate = v
}

// GetLatestFeature returns the LatestFeature field value if set, zero value otherwise.
func (o *User) GetLatestFeature() string {
	if o == nil || o.LatestFeature == nil {
		var ret string
		return ret
	}
	return *o.LatestFeature
}

// GetLatestFeatureOk returns a tuple with the LatestFeature field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLatestFeatureOk() (string, bool) {
	if o == nil || o.LatestFeature == nil {
		var ret string
		return ret, false
	}
	return *o.LatestFeature, true
}

// HasLatestFeature returns a boolean if a field has been set.
func (o *User) HasLatestFeature() bool {
	if o != nil && o.LatestFeature != nil {
		return true
	}

	return false
}

// SetLatestFeature gets a reference to the given string and assigns it to the LatestFeature field.
func (o *User) SetLatestFeature(v string) {
	o.LatestFeature = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *User) GetRoles() []int32 {
	if o == nil || o.Roles == nil {
		var ret []int32
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *User) GetRolesOk() ([]int32, bool) {
	if o == nil || o.Roles == nil {
		var ret []int32
		return ret, false
	}
	return *o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *User) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []int32 and assigns it to the Roles field.
func (o *User) SetRoles(v []int32) {
	o.Roles = &v
}

// GetApplicationNotificationSubscriptions returns the ApplicationNotificationSubscriptions field value if set, zero value otherwise.
func (o *User) GetApplicationNotificationSubscriptions() map[string]interface{} {
	if o == nil || o.ApplicationNotificationSubscriptions == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ApplicationNotificationSubscriptions
}

// GetApplicationNotificationSubscriptionsOk returns a tuple with the ApplicationNotificationSubscriptions field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *User) GetApplicationNotificationSubscriptionsOk() (map[string]interface{}, bool) {
	if o == nil || o.ApplicationNotificationSubscriptions == nil {
		var ret map[string]interface{}
		return ret, false
	}
	return *o.ApplicationNotificationSubscriptions, true
}

// HasApplicationNotificationSubscriptions returns a boolean if a field has been set.
func (o *User) HasApplicationNotificationSubscriptions() bool {
	if o != nil && o.ApplicationNotificationSubscriptions != nil {
		return true
	}

	return false
}

// SetApplicationNotificationSubscriptions gets a reference to the given map[string]interface{} and assigns it to the ApplicationNotificationSubscriptions field.
func (o *User) SetApplicationNotificationSubscriptions(v map[string]interface{}) {
	o.ApplicationNotificationSubscriptions = &v
}

// GetAuthMethod returns the AuthMethod field value if set, zero value otherwise.
func (o *User) GetAuthMethod() string {
	if o == nil || o.AuthMethod == nil {
		var ret string
		return ret
	}
	return *o.AuthMethod
}

// GetAuthMethodOk returns a tuple with the AuthMethod field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *User) GetAuthMethodOk() (string, bool) {
	if o == nil || o.AuthMethod == nil {
		var ret string
		return ret, false
	}
	return *o.AuthMethod, true
}

// HasAuthMethod returns a boolean if a field has been set.
func (o *User) HasAuthMethod() bool {
	if o != nil && o.AuthMethod != nil {
		return true
	}

	return false
}

// SetAuthMethod gets a reference to the given string and assigns it to the AuthMethod field.
func (o *User) SetAuthMethod(v string) {
	o.AuthMethod = &v
}

type NullableUser struct {
	Value        User
	ExplicitNull bool
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
