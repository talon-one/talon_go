/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * API version: 
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// NotificationListItem struct for NotificationListItem
type NotificationListItem struct {
	// The ID of the notification.
	NotificationId int32 `json:"notificationId"`
	// The name of the notification.
	NotificationName string `json:"notificationName"`
	// The ID of the entity to which this notification belongs. For example, in case of a loyalty notification, this value is the ID of the loyalty program. 
	EntityId int32 `json:"entityId"`
	// Indicates whether the notification is activated.
	Enabled bool `json:"enabled"`
}

// GetNotificationId returns the NotificationId field value
func (o *NotificationListItem) GetNotificationId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NotificationId
}

// SetNotificationId sets field value
func (o *NotificationListItem) SetNotificationId(v int32) {
	o.NotificationId = v
}

// GetNotificationName returns the NotificationName field value
func (o *NotificationListItem) GetNotificationName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotificationName
}

// SetNotificationName sets field value
func (o *NotificationListItem) SetNotificationName(v string) {
	o.NotificationName = v
}

// GetEntityId returns the EntityId field value
func (o *NotificationListItem) GetEntityId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EntityId
}

// SetEntityId sets field value
func (o *NotificationListItem) SetEntityId(v int32) {
	o.EntityId = v
}

// GetEnabled returns the Enabled field value
func (o *NotificationListItem) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// SetEnabled sets field value
func (o *NotificationListItem) SetEnabled(v bool) {
	o.Enabled = v
}

type NullableNotificationListItem struct {
	Value NotificationListItem
	ExplicitNull bool
}

func (v NullableNotificationListItem) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableNotificationListItem) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
