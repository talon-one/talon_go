/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// NewCouponsAllOf struct for NewCouponsAllOf
type NewCouponsAllOf struct {
	// The number of new coupon codes to generate for the campaign. Must be at least 1.
	NumberOfCoupons int32 `json:"numberOfCoupons"`
	// **DEPRECATED** To create more than 20,000 coupons in one request, use [Create coupons asynchronously](https://docs.talon.one/management-api#operation/createCouponsAsync) endpoint. 
	UniquePrefix *string `json:"uniquePrefix,omitempty"`
	// Arbitrary properties associated with this item.
	Attributes *map[string]map[string]interface{} `json:"attributes,omitempty"`
	// The integration ID for this coupon's beneficiary's profile.
	RecipientIntegrationId *string `json:"recipientIntegrationId,omitempty"`
	// List of characters used to generate the random parts of a code. By default, the list of characters is equivalent to the `[A-Z, 0-9]` regular expression. 
	ValidCharacters *[]string `json:"validCharacters,omitempty"`
	// The pattern used to generate coupon codes. The character `#` is a placeholder and is replaced by a random character from the `validCharacters` set. 
	CouponPattern *string `json:"couponPattern,omitempty"`
	// An indication of whether the code can be redeemed only if it has been reserved first.
	IsReservationMandatory *bool `json:"isReservationMandatory,omitempty"`
	// An indication of whether the coupon is implicitly reserved for all customers.
	ImplicitlyReserved *bool `json:"implicitlyReserved,omitempty"`
}

// GetNumberOfCoupons returns the NumberOfCoupons field value
func (o *NewCouponsAllOf) GetNumberOfCoupons() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberOfCoupons
}

// SetNumberOfCoupons sets field value
func (o *NewCouponsAllOf) SetNumberOfCoupons(v int32) {
	o.NumberOfCoupons = v
}

// GetUniquePrefix returns the UniquePrefix field value if set, zero value otherwise.
func (o *NewCouponsAllOf) GetUniquePrefix() string {
	if o == nil || o.UniquePrefix == nil {
		var ret string
		return ret
	}
	return *o.UniquePrefix
}

// GetUniquePrefixOk returns a tuple with the UniquePrefix field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewCouponsAllOf) GetUniquePrefixOk() (string, bool) {
	if o == nil || o.UniquePrefix == nil {
		var ret string
		return ret, false
	}
	return *o.UniquePrefix, true
}

// HasUniquePrefix returns a boolean if a field has been set.
func (o *NewCouponsAllOf) HasUniquePrefix() bool {
	if o != nil && o.UniquePrefix != nil {
		return true
	}

	return false
}

// SetUniquePrefix gets a reference to the given string and assigns it to the UniquePrefix field.
func (o *NewCouponsAllOf) SetUniquePrefix(v string) {
	o.UniquePrefix = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *NewCouponsAllOf) GetAttributes() map[string]map[string]interface{} {
	if o == nil || o.Attributes == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewCouponsAllOf) GetAttributesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		var ret map[string]map[string]interface{}
		return ret, false
	}
	return *o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *NewCouponsAllOf) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]map[string]interface{} and assigns it to the Attributes field.
func (o *NewCouponsAllOf) SetAttributes(v map[string]map[string]interface{}) {
	o.Attributes = &v
}

// GetRecipientIntegrationId returns the RecipientIntegrationId field value if set, zero value otherwise.
func (o *NewCouponsAllOf) GetRecipientIntegrationId() string {
	if o == nil || o.RecipientIntegrationId == nil {
		var ret string
		return ret
	}
	return *o.RecipientIntegrationId
}

// GetRecipientIntegrationIdOk returns a tuple with the RecipientIntegrationId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewCouponsAllOf) GetRecipientIntegrationIdOk() (string, bool) {
	if o == nil || o.RecipientIntegrationId == nil {
		var ret string
		return ret, false
	}
	return *o.RecipientIntegrationId, true
}

// HasRecipientIntegrationId returns a boolean if a field has been set.
func (o *NewCouponsAllOf) HasRecipientIntegrationId() bool {
	if o != nil && o.RecipientIntegrationId != nil {
		return true
	}

	return false
}

// SetRecipientIntegrationId gets a reference to the given string and assigns it to the RecipientIntegrationId field.
func (o *NewCouponsAllOf) SetRecipientIntegrationId(v string) {
	o.RecipientIntegrationId = &v
}

// GetValidCharacters returns the ValidCharacters field value if set, zero value otherwise.
func (o *NewCouponsAllOf) GetValidCharacters() []string {
	if o == nil || o.ValidCharacters == nil {
		var ret []string
		return ret
	}
	return *o.ValidCharacters
}

// GetValidCharactersOk returns a tuple with the ValidCharacters field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewCouponsAllOf) GetValidCharactersOk() ([]string, bool) {
	if o == nil || o.ValidCharacters == nil {
		var ret []string
		return ret, false
	}
	return *o.ValidCharacters, true
}

// HasValidCharacters returns a boolean if a field has been set.
func (o *NewCouponsAllOf) HasValidCharacters() bool {
	if o != nil && o.ValidCharacters != nil {
		return true
	}

	return false
}

// SetValidCharacters gets a reference to the given []string and assigns it to the ValidCharacters field.
func (o *NewCouponsAllOf) SetValidCharacters(v []string) {
	o.ValidCharacters = &v
}

// GetCouponPattern returns the CouponPattern field value if set, zero value otherwise.
func (o *NewCouponsAllOf) GetCouponPattern() string {
	if o == nil || o.CouponPattern == nil {
		var ret string
		return ret
	}
	return *o.CouponPattern
}

// GetCouponPatternOk returns a tuple with the CouponPattern field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewCouponsAllOf) GetCouponPatternOk() (string, bool) {
	if o == nil || o.CouponPattern == nil {
		var ret string
		return ret, false
	}
	return *o.CouponPattern, true
}

// HasCouponPattern returns a boolean if a field has been set.
func (o *NewCouponsAllOf) HasCouponPattern() bool {
	if o != nil && o.CouponPattern != nil {
		return true
	}

	return false
}

// SetCouponPattern gets a reference to the given string and assigns it to the CouponPattern field.
func (o *NewCouponsAllOf) SetCouponPattern(v string) {
	o.CouponPattern = &v
}

// GetIsReservationMandatory returns the IsReservationMandatory field value if set, zero value otherwise.
func (o *NewCouponsAllOf) GetIsReservationMandatory() bool {
	if o == nil || o.IsReservationMandatory == nil {
		var ret bool
		return ret
	}
	return *o.IsReservationMandatory
}

// GetIsReservationMandatoryOk returns a tuple with the IsReservationMandatory field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewCouponsAllOf) GetIsReservationMandatoryOk() (bool, bool) {
	if o == nil || o.IsReservationMandatory == nil {
		var ret bool
		return ret, false
	}
	return *o.IsReservationMandatory, true
}

// HasIsReservationMandatory returns a boolean if a field has been set.
func (o *NewCouponsAllOf) HasIsReservationMandatory() bool {
	if o != nil && o.IsReservationMandatory != nil {
		return true
	}

	return false
}

// SetIsReservationMandatory gets a reference to the given bool and assigns it to the IsReservationMandatory field.
func (o *NewCouponsAllOf) SetIsReservationMandatory(v bool) {
	o.IsReservationMandatory = &v
}

// GetImplicitlyReserved returns the ImplicitlyReserved field value if set, zero value otherwise.
func (o *NewCouponsAllOf) GetImplicitlyReserved() bool {
	if o == nil || o.ImplicitlyReserved == nil {
		var ret bool
		return ret
	}
	return *o.ImplicitlyReserved
}

// GetImplicitlyReservedOk returns a tuple with the ImplicitlyReserved field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *NewCouponsAllOf) GetImplicitlyReservedOk() (bool, bool) {
	if o == nil || o.ImplicitlyReserved == nil {
		var ret bool
		return ret, false
	}
	return *o.ImplicitlyReserved, true
}

// HasImplicitlyReserved returns a boolean if a field has been set.
func (o *NewCouponsAllOf) HasImplicitlyReserved() bool {
	if o != nil && o.ImplicitlyReserved != nil {
		return true
	}

	return false
}

// SetImplicitlyReserved gets a reference to the given bool and assigns it to the ImplicitlyReserved field.
func (o *NewCouponsAllOf) SetImplicitlyReserved(v bool) {
	o.ImplicitlyReserved = &v
}

type NullableNewCouponsAllOf struct {
	Value NewCouponsAllOf
	ExplicitNull bool
}

func (v NullableNewCouponsAllOf) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableNewCouponsAllOf) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
