/*
 * Talon.One API
 *
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}`
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// LoyaltyProgramBalance The balance in a Loyalty Program for some Customer.
type LoyaltyProgramBalance struct {
	// Sum of currently active points.
	CurrentBalance float32 `json:"currentBalance"`
	// Sum of pending points.
	PendingBalance float32 `json:"pendingBalance"`
	// Sum of expired points.
	ExpiredBalance float32 `json:"expiredBalance"`
	// Sum of spent points.
	SpentBalance float32 `json:"spentBalance"`
	// Sum of currently active points, including points added and deducted in open sessions.
	TentativeCurrentBalance float32 `json:"tentativeCurrentBalance"`
}

// GetCurrentBalance returns the CurrentBalance field value
func (o *LoyaltyProgramBalance) GetCurrentBalance() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CurrentBalance
}

// SetCurrentBalance sets field value
func (o *LoyaltyProgramBalance) SetCurrentBalance(v float32) {
	o.CurrentBalance = v
}

// GetPendingBalance returns the PendingBalance field value
func (o *LoyaltyProgramBalance) GetPendingBalance() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PendingBalance
}

// SetPendingBalance sets field value
func (o *LoyaltyProgramBalance) SetPendingBalance(v float32) {
	o.PendingBalance = v
}

// GetExpiredBalance returns the ExpiredBalance field value
func (o *LoyaltyProgramBalance) GetExpiredBalance() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ExpiredBalance
}

// SetExpiredBalance sets field value
func (o *LoyaltyProgramBalance) SetExpiredBalance(v float32) {
	o.ExpiredBalance = v
}

// GetSpentBalance returns the SpentBalance field value
func (o *LoyaltyProgramBalance) GetSpentBalance() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SpentBalance
}

// SetSpentBalance sets field value
func (o *LoyaltyProgramBalance) SetSpentBalance(v float32) {
	o.SpentBalance = v
}

// GetTentativeCurrentBalance returns the TentativeCurrentBalance field value
func (o *LoyaltyProgramBalance) GetTentativeCurrentBalance() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TentativeCurrentBalance
}

// SetTentativeCurrentBalance sets field value
func (o *LoyaltyProgramBalance) SetTentativeCurrentBalance(v float32) {
	o.TentativeCurrentBalance = v
}

type NullableLoyaltyProgramBalance struct {
	Value        LoyaltyProgramBalance
	ExplicitNull bool
}

func (v NullableLoyaltyProgramBalance) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableLoyaltyProgramBalance) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
