/*
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// UpdateRole struct for UpdateRole
type UpdateRole struct {
	// Name of the role
	Name *string `json:"name,omitempty"`
	// Description of the role
	Description *string `json:"description,omitempty"`
	// Role Policy this should be a stringified blob of json
	Acl *string `json:"acl,omitempty"`
	// an array of user identifiers
	Users *[]int32 `json:"users,omitempty"`
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateRole) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRole) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateRole) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateRole) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateRole) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRole) GetDescriptionOk() (string, bool) {
	if o == nil || o.Description == nil {
		var ret string
		return ret, false
	}
	return *o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateRole) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateRole) SetDescription(v string) {
	o.Description = &v
}

// GetAcl returns the Acl field value if set, zero value otherwise.
func (o *UpdateRole) GetAcl() string {
	if o == nil || o.Acl == nil {
		var ret string
		return ret
	}
	return *o.Acl
}

// GetAclOk returns a tuple with the Acl field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRole) GetAclOk() (string, bool) {
	if o == nil || o.Acl == nil {
		var ret string
		return ret, false
	}
	return *o.Acl, true
}

// HasAcl returns a boolean if a field has been set.
func (o *UpdateRole) HasAcl() bool {
	if o != nil && o.Acl != nil {
		return true
	}

	return false
}

// SetAcl gets a reference to the given string and assigns it to the Acl field.
func (o *UpdateRole) SetAcl(v string) {
	o.Acl = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *UpdateRole) GetUsers() []int32 {
	if o == nil || o.Users == nil {
		var ret []int32
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRole) GetUsersOk() ([]int32, bool) {
	if o == nil || o.Users == nil {
		var ret []int32
		return ret, false
	}
	return *o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *UpdateRole) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []int32 and assigns it to the Users field.
func (o *UpdateRole) SetUsers(v []int32) {
	o.Users = &v
}

type NullableUpdateRole struct {
	Value        UpdateRole
	ExplicitNull bool
}

func (v NullableUpdateRole) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableUpdateRole) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
