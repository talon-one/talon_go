/*
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package talon

import (
	"bytes"
	"encoding/json"
)

// SlotDef struct for SlotDef
type SlotDef struct {
	// The dot-separated path to this slot for use in Talang.
	Name string `json:"name"`
	// The type of this slot, one of string, number, boolean, or list[type].
	Type string `json:"type"`
	// Campaigner-friendly name for the slot.
	Title string `json:"title"`
	// A short description of the slot.
	Description *string `json:"description,omitempty"`
	// Extended help text for the slot.
	Help *string `json:"help,omitempty"`
	// Whether or not this slot can be updated by rule effects.
	Writable bool `json:"writable"`
}

// GetName returns the Name field value
func (o *SlotDef) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// SetName sets field value
func (o *SlotDef) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *SlotDef) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// SetType sets field value
func (o *SlotDef) SetType(v string) {
	o.Type = v
}

// GetTitle returns the Title field value
func (o *SlotDef) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// SetTitle sets field value
func (o *SlotDef) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SlotDef) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SlotDef) GetDescriptionOk() (string, bool) {
	if o == nil || o.Description == nil {
		var ret string
		return ret, false
	}
	return *o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SlotDef) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SlotDef) SetDescription(v string) {
	o.Description = &v
}

// GetHelp returns the Help field value if set, zero value otherwise.
func (o *SlotDef) GetHelp() string {
	if o == nil || o.Help == nil {
		var ret string
		return ret
	}
	return *o.Help
}

// GetHelpOk returns a tuple with the Help field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SlotDef) GetHelpOk() (string, bool) {
	if o == nil || o.Help == nil {
		var ret string
		return ret, false
	}
	return *o.Help, true
}

// HasHelp returns a boolean if a field has been set.
func (o *SlotDef) HasHelp() bool {
	if o != nil && o.Help != nil {
		return true
	}

	return false
}

// SetHelp gets a reference to the given string and assigns it to the Help field.
func (o *SlotDef) SetHelp(v string) {
	o.Help = &v
}

// GetWritable returns the Writable field value
func (o *SlotDef) GetWritable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Writable
}

// SetWritable sets field value
func (o *SlotDef) SetWritable(v bool) {
	o.Writable = v
}

type NullableSlotDef struct {
	Value        SlotDef
	ExplicitNull bool
}

func (v NullableSlotDef) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableSlotDef) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
